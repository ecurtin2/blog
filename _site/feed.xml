<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-03-28T15:57:36-05:00</updated><id>http://localhost:4000/</id><title type="html">Evan’s Blog!</title><subtitle>Overthinking simple questions since 2016 (kinda).</subtitle><entry><title type="html">Use Numba and SciPy for Fast Integrals</title><link href="http://localhost:4000/2018/03/05/Use-Numba-and-SciPy-for-Fast-Integrals.html" rel="alternate" type="text/html" title="Use Numba and SciPy for Fast Integrals" /><published>2018-03-05T00:00:00-06:00</published><updated>2018-03-05T00:00:00-06:00</updated><id>http://localhost:4000/2018/03/05/Use-Numba-and-SciPy-for-Fast-Integrals</id><content type="html" xml:base="http://localhost:4000/2018/03/05/Use-Numba-and-SciPy-for-Fast-Integrals.html">&lt;script src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;

&lt;p&gt;Here’s a quick tip to make your integrals super fast in python. Suppose you wanted to integrate a function in 3D. We can start by import nquad from scipy and defining our function.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scipy.integrate&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nquad&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;nquad makes it super easy to integrate a function in any number of dimensions, lets see:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nquad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(-0.14048187566074577, 1.4506979457578973e-08)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s check how long it took:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nquad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;19.5 ms ± 222 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pretty good, right? Well let’s see if we can do better (because maybe with a different function we’ll need to). &lt;a href=&quot;https://numba.pydata.org/&quot;&gt;Numba&lt;/a&gt; is a just-in-time compiler focused on numeric python. Let’s give it a try:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numba&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It works by adding a @jit decorator to our function. It infers the types of the arguments when it sees them and compiles the function into LLVM bytecode. The result can be significantly faster (I’ve seen easily two orders of magnitude).&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@numba.jit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s see if it’s still correct and how long it takes:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nquad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nquad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(-0.14048187566074577, 1.4506979457578973e-08)
10.9 ms ± 17.3 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hey! Twice as fast with no work at all! Pretty nice if you ask me. But there is one more layer. The nquad function calls our compiled function from python, meaning that every time it calls the function we’re getting python function call overhead. Fortunately, scipy now has support for  &lt;em&gt;LowLevelCallable&lt;/em&gt; types. The specifics are in the documentation, but basically you can use a c function from scipy and the nquad routine will call it directly, without indirection to the python interpreter.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scipy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LowLevelCallable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I never particularly cared for this, until I also saw that Numba now supports generating c functions directly from Python! Scipy needs a c-level function with the signature &lt;code class=&quot;highlighter-rouge&quot;&gt;double(int, double*)&lt;/code&gt;, so we have to tell numba this is what we want. This is very easy. Unfortunately, this also means we are a bit more restricted in what we can do here.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numba&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carray&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;c_sig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@cfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;new_f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LowLevelCallable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nquad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nquad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(-0.14048187566074577, 1.4506979457578973e-08)
6.2 ms ± 14.7 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cool! We beat the straightforward numba approach. Unfortunately we had to write a little bit more c-like code. It’s not too bad though. I’m betting we can also take advantage of how Numba basically inlines variables it knows at compile time to do basically whatever we want. The cool thing here is that we’re calling QUADPACK with a C level callback function, and the performance should be essentially optimal, as the python overhead is minimized.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Abstract Linear Algebra in Python</title><link href="http://localhost:4000/2018/03/03/Abstract-Linear-Algebra-in-Python.html" rel="alternate" type="text/html" title="Abstract Linear Algebra in Python" /><published>2018-03-03T00:00:00-06:00</published><updated>2018-03-03T00:00:00-06:00</updated><id>http://localhost:4000/2018/03/03/Abstract-Linear-Algebra-in-Python</id><content type="html" xml:base="http://localhost:4000/2018/03/03/Abstract-Linear-Algebra-in-Python.html">&lt;script src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\mathbf{S^{-1}AS} =  \left[\begin{matrix}a - b &amp; 0\\0 &amp; a + b\end{matrix}\right] %]]&gt;&lt;/script&gt;

&lt;p&gt;Lately I’ve been playing around with the &lt;a href=&quot;https://trilinos.org/packages/anasazi/&quot;&gt;anasazi&lt;/a&gt; library. It’s basically a library that implements algorithms to solve eigenvalue problems that are all completely unaware of the underling data structures. The way this is done is by implementing the algorithms in terms of an &lt;strong&gt;interface&lt;/strong&gt;. Basically, this interface is a contract between whoever wrote the library, and whoever is using it. It’s a formal way for the library writer to say “If you give me an object that implements x, and y, this library will do Z with that object.”&lt;/p&gt;

&lt;p&gt;This idea is a bit… abstract. &lt;em&gt;And that’s the whole point&lt;/em&gt;. Two places where this idea is used constantly are the Python Standard Library and the C++ Standard Template Library (STL). In Python, any object that implements __iter__ and __next__ is automatically considered an iterable, and this opens up a ton of the standard library. In C++, similar functionality is done using iterators, the basic type that all of the STL algorithms work on.&lt;/p&gt;

&lt;p&gt;In python, for instance, this allows you to define a custom collection with __iter__ and __next__, and now you automatically get any(), all(), list() and so on, &lt;em&gt;regardless of what it is your collection does&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This has the significant advantage that the algorithms and data structures you use become decoupled. Therefore to implement N algorithms on M data structures, you only need to implement N + M things around a common interface, rather than the N * M combinations of algorithms and data structures. It’s never quite this amazing in practice, but it’s close.&lt;/p&gt;

&lt;h2 id=&quot;moving-past-numpy-separating-algorithms-and-data-structures-in-linear-algebra&quot;&gt;Moving Past numpy: Separating Algorithms and data structures in Linear Algebra&lt;/h2&gt;

&lt;p&gt;This is getting long winded. Assume for now that numpy is not doing what we need (say, we need memory - distributed matrices for our problem or something). Rather than rewrite an entire algorithm for another type, why not abstract away numpy in the first place? Then we simply need to write an interface between our algorithm and any data structure we want it to be able to use.&lt;/p&gt;

&lt;h2 id=&quot;case-study---the-similarity-transform&quot;&gt;Case Study - The Similarity Transform&lt;/h2&gt;

&lt;p&gt;Python’s duck typing actually makes this almost too easy to be true. However I prefer the explicit abstract method interface: here’s the imports:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;abc&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ABC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ABCMeta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abstractmethod&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_printoptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suppress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;IPython.display&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lets write out a function for a similarity transform, 
&lt;script type=&quot;math/tex&quot;&gt;\mathbf{\tilde{A}} = \mathbf{S}^{-1}\mathbf{A}\mathbf{S}&lt;/script&gt; 
but let’s use this idea of an abstract interface. The funny thing is, this looks remarkable like psuedo - code:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SimilarityTransform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimilarityTransformInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STInterface&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we assumed that there’s something out there called a SimilarityTransformInterface, and the thing we are being passed is an instance of that. Think for a second: what would this interface need to look like? Well, anything conforming to this interface has to implement an inverse() method as well as the @ operator, the python operator for matrix multliplication (since Python 3.5 - you’re not still using python 2 right?).&lt;/p&gt;

&lt;p&gt;The cool thing is, you can express this idea by defining an &lt;em&gt;Abstract Base Class&lt;/em&gt; with &lt;em&gt;Abstract Methods&lt;/em&gt;. Basically, an abstract base class cannot be instantiated, but it can be subclassed. The rule is, any subclass must implement all methods marked as abstract by the @abstractmethod decorator.&lt;/p&gt;

&lt;p&gt;So let’s define our abstract base class:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimilarityTransformInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ABCMeta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@abstractmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
        
    &lt;span class=&quot;nd&quot;&gt;@abstractmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__matmul__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__subclasshook__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Any class that implements all abstract methods of this ABC is a subclass.
        
        This does not require that they inherit from this class!!!        
        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimilarityTransformInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;requirements_met&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__abstractmethods__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;requirements_met&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__dict__&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__mro__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requirements_met&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NotImplemented&lt;/span&gt;        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we’ve basically instructed anybody who wants to subclass this class that they must implement inverse() and __matmul__ themselves.&lt;/p&gt;

&lt;p&gt;But that’s not all. The __subclasshoook__ method is where it gets real funky. It basically patches python’s issubclass and isinstance methods, and this function as written here basically tells python that  &lt;strong&gt;any class that implements all of the abstractmethods IS A SimilarityTransformInterface&lt;/strong&gt;, and there’s no need to inherit from it!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IsOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__matmul__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;issubclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NotOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimilarityTransformInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;issubclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimilarityTransformInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;False
True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So now we’ve defined our interface, and we can check to make sure whatever we’re being passed conforms to it. We’re now officially done writing the algorithm. Now all we have to do is write a wrapper for whatever our data types are to make them conform to the interface. I did this for numpy arrays below by copying fromt their documentation:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NumpyShim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ndarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;This wraps a numpy array object into a SimiliarityTransformInterface compliant object.&quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__array_finalize__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I just used the np.linalg.inv inverse&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linalg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ignore the __new__ and __aray_finalize__ functions. They have to do with complications of subclassing numpy arrays. Since numpy already defines the __matmul__ function (for using @ on numpy arrays) all I have to define is the inverse. Numpy also has an inverse function, so I can just call that function within inverse(). Right now this all probably looks like a lot more work to write a one line numpy function, but bear with me.&lt;/p&gt;

&lt;p&gt;Let’s first make sure that our similarity transform algorithm works on numpy arrays. We can test this by diagonalizing a symmetric matrix, and seeing if we can use the eigenvectors to transform it into a diagonal matrix of eigenvalues.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;evals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evecs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linalg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eigh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NumpyShim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;evecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NumpyShim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Eigenvalues are: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;SimilarityTransform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Eigenvalues are:  [-3.71087275 -1.94249831 -0.09555686  3.90007723]
I just used the np.linalg.inv inverse





NumpyShim([[-3.71087275, -0.        , -0.        ,  0.        ],
           [-0.        , -1.94249831, -0.        ,  0.        ],
           [ 0.        ,  0.        , -0.09555686, -0.        ],
           [ 0.        ,  0.        , -0.        ,  3.90007723]])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wohoo! It works! But that was a lot of work for basically nothing. Here’s where it can get interesting. We know that we have orthogonal eigenvectors of a hermitian matrix, and we know that the inverse of an orthogonal matrix is just it’s transpose. So let’s not waste our time calculating the inverse when we could just do the transpose. But we don’t wanna mess with the algorithm when we know it works:&lt;/p&gt;

&lt;p&gt;Let’s do this by making a specialized OrthogonalArray class, whose inverse() method is just the transpose operation. Like so:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrthogonalArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NumpyShim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Specializes inverse function for orthogonal numpy arrays&quot;&quot;&quot;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allclose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eye&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))),&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Must be orthogonal!&quot;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I just used the orthogonal array inverse&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now all we have to do is convert our eigenvectors to be an OrthogonalArray and call the similarity transform on that. Note that it uses the orthogonal array inverse function.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sym&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrthogonalArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;evecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SimilarityTransform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I just used the orthogonal array inverse





OrthogonalArray([[-3.71087275, -0.        , -0.        ,  0.        ],
                 [-0.        , -1.94249831,  0.        ,  0.        ],
                 [-0.        , -0.        , -0.09555686, -0.        ],
                 [ 0.        ,  0.        , -0.        ,  3.90007723]])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ok that’s pretty neat, isn’t it? We can specialize our data structures to optimize certain restrictions that we know to be true. But the underlying algorithm is unchanged.&lt;/p&gt;

&lt;p&gt;If you’re still not convinced, imagine the following: You could use a sparse array, an out-of-memory dask array, or maybe a massively parallel Trilinos or Petsc array to do this &lt;strong&gt;same algorithm&lt;/strong&gt; they just &lt;em&gt;need to implement the correct interface&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ok-lets-get-real-weird&quot;&gt;Ok let’s get real weird&lt;/h2&gt;

&lt;p&gt;Allow me to demonstrate. I’m going to use the same function to do a &lt;em&gt;symbolic&lt;/em&gt; similarity transform using sympy.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init_printing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;init_printing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use_unicode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SympyShim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again, sympy implements the @ operator for us already. (We could have actually required .inv() instead of .inverse() and used both numpy and sympy, but I wanted to illustrate). So we spend the 10 seconds it takes to implement our interface using sympy Matrices.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\left[\begin{matrix}a &amp; b\\b &amp; a\end{matrix}\right] %]]&gt;&lt;/script&gt;

&lt;p&gt;Let’s take a look at the eigenvalues and vectors:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pair1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eigenvects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\left ( a - b, \quad 1, \quad \left [ \left[\begin{matrix}-1\\1\end{matrix}\right]\right ]\right )&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\left ( a + b, \quad 1, \quad \left [ \left[\begin{matrix}1\\1\end{matrix}\right]\right ]\right )&lt;/script&gt;

&lt;p&gt;Sympy gives us (eigenvalue, multiplicity, eigenvector) tuples as a result, so we have our eigenvectors and values. Lets make a single matrix for the vectors:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sympy_evecs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sympy_evecs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\left[\begin{matrix}-1 &amp; 1\\1 &amp; 1\end{matrix}\right] %]]&gt;&lt;/script&gt;

&lt;p&gt;Now just convert to our interface type, and use our similarity transform:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SympyShim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sympy_evecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SimilarityTransform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\left[\begin{matrix}a - b &amp; 0\\0 &amp; a + b\end{matrix}\right] %]]&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;What the &amp;gt;^_!&lt;/strong&gt; it works!!!  Ok maybe I’m overexaggerating what’s going on here but I’ve demonstrated the core idea here. This is an incredibly simple function that I’m implementing but the core idea is the same. &lt;strong&gt;The duck typing of Python makes it an ideal language to implement abstract algorithms that are independent of the underling datatypes&lt;/strong&gt;. Can you do this type of thing in C++? Surely, but get your templates and 1200 character types ready.&lt;/p&gt;

&lt;p&gt;I also think that a lot of linear algebra algorithms are a great target for this approach. Writing a lot of the interface code is quite straightforward (it really really really looks like pseudo code) and then you just have to wrap a lot of very commonly implemented tasks anyway (inverse, dot product, etc).&lt;/p&gt;

&lt;p&gt;Then you can leverage a lot of linear algebra packages: numpy/scipy, theano, dask, pestc, trilinos, CUDABLAS, tensorflow, etc. with the same algorithms.&lt;/p&gt;

&lt;p&gt;You can also do &lt;strong&gt;Matrix free computation where you never even store a matrix&lt;/strong&gt;. This problem happens all the time if you’re dealing with very large matrices that are hundreds of thousands or millions of rows.&lt;/p&gt;

&lt;p&gt;Maybe we can re implement &lt;a href=&quot;https://trilinos.org/packages/anasazi/&quot;&gt;anasazi&lt;/a&gt; eigensolvers at the algorithm level in python. Then we can have plug-n-play Lanczos, Arnoldi, Davidson, etc algorithms.&lt;/p&gt;

&lt;p&gt;Last thing then I’ll be quiet. Imagine using this approach in conjunction with numpy as a proof of concept of your algorithm. Come production time, just write a wrapper for theano and if you do it properly you ought to be able to generate the compute graph of your entire algorithm, and let theano optimize and compile it. I really think this approach to solving problems will really shine when paired with the Python scientific stack.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">What is a Molecule?</title><link href="http://localhost:4000/2016/12/14/What-is-a-Molecule.html" rel="alternate" type="text/html" title="What is a Molecule?" /><published>2016-12-14T00:00:00-06:00</published><updated>2016-12-14T00:00:00-06:00</updated><id>http://localhost:4000/2016/12/14/What-is-a-Molecule</id><content type="html" xml:base="http://localhost:4000/2016/12/14/What-is-a-Molecule.html">&lt;p&gt;&lt;img src=&quot;/assets/posts/2016-12-14-What-is-a-Molecule/output_2_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;script src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;

&lt;p&gt;I recently replied to an reddit &lt;a href=&quot;https://www.reddit.com/r/askscience/comments/59frj2/could_someone_explain_what_this_iupac_definition/&quot;&gt;/r/askscience post&lt;/a&gt; that got me overthinking about something so simple, I just had to write a post about it. The main crux of the issue is simple. At a base level, what is a molecule? As I’ll show you now, a rigorous definition is a bit tricky. International Union of Pure and Applied Chemistry is basically the chemical naming authority. Here’s &lt;a href=&quot;https://goldbook.iupac.org/M04002.html&quot;&gt;IUPAC’s definition of molecule&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An electrically neutral entity consisting of more than one atom (n &amp;gt; 1). Rigorously, a molecule, in which  n &amp;gt; 1 must correspond to a depression on the potential energy surface that is deep enough to confine at least one vibrational state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s break this down into pieces&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1) An electrically neutral entity consisting of more than one atom (n &amp;gt; 1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Fair enough, if this were the whole definition then any arrangement of 2 or more atoms constitutes a molecule. This is a bit weird, considering that basically everything falls into this category, as long as it doesn’t hold a charge. However there’s not too much to discuss on this point.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2) Rigorously, a molecule, in which  n &amp;gt; 1 must correspond to a depression on the potential energy surface that is deep enough to confine at least one vibrational state.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What? Potential energy surface? Confined vibrations?? What does this have to do with a molecule?&lt;/p&gt;

&lt;p&gt;Quite a lot actually, let’s dig in!&lt;/p&gt;

&lt;h2 id=&quot;potential-energy-surface-pes&quot;&gt;Potential Energy Surface (PES)&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;We chemists like to use the phrase Potential Energy Surface a lot, so much so that we invented an acronym for it. The PES basically tells us how the energy changes as atoms move around. Let’s take a look at an example PES:&lt;/p&gt;

&lt;p&gt;Here is a typical PES for a two-atom molecule such as H2 or N2. As you can see, the energy is very high towards the left, which is when we start smashing the two nuclei into one another.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2016-12-14-What-is-a-Molecule/output_2_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the other extreme on the right, the curve begins to level out. This is because the atoms are so far apart, moving them farther away does nothing, since they are completely independent.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2016-12-14-What-is-a-Molecule/output_4_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lastly, we have the case where the atoms are in their lowest energy arrangement. Since nature likes moving towards a low energy state, this is the most stable form of the molecule. The distance at which this occurs is the &lt;strong&gt;bond length&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So, we can think of a molecule forming from atoms &lt;strong&gt;when the lowest energy point of the PES is not the atoms being far apart&lt;/strong&gt;. An example where this might not happen is in the following PES:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2016-12-14-What-is-a-Molecule/output_6_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice how the energy keeps going down as you increase the distance. This means that the atoms will constantly want to keep getting farther apart, and &lt;strong&gt;you have no molecule!&lt;/strong&gt; In the words of IUPAC, a surface that looks like this has no depression whatsoever!&lt;/p&gt;

&lt;h2 id=&quot;vibrational-state&quot;&gt;Vibrational State&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Ok so we’ve learned that in order to have a molecule, we need to have a PES with a &lt;em&gt;depression&lt;/em&gt; in it. Most of the time we call such a depression a &lt;strong&gt;potential well&lt;/strong&gt;. This is because a potential well is lower than the points around it, much like a regular well. However, atoms in molecules are always vibrating about. What does this mean for our molecules’ existance? It means that the vibration can’t have too much energy, or else the molecule will &lt;strong&gt;tear itself apart&lt;/strong&gt;. Let’s draw some pictures to clarify.&lt;/p&gt;

&lt;p&gt;Here is what it would look like for a molecule to be safely vibrating, but still staying together:&lt;/p&gt;

&lt;video width=&quot;576&quot; height=&quot;288&quot; controls=&quot;&quot; autoplay=&quot;&quot; loop=&quot;&quot;&gt;
  &lt;source type=&quot;video/mp4&quot; src=&quot;data:video/mp4;base64,AAAAHGZ0eXBNNFYgAAACAGlzb21pc28yYXZjMQAAAAhmcmVlAAA2q21kYXQAAAKuBgX//6rcRem9
5tlIt5Ys2CDZI+7veDI2NCAtIGNvcmUgMTQ4IHIyNjQzIDVjNjU3MDQgLSBILjI2NC9NUEVHLTQg
QVZDIGNvZGVjIC0gQ29weWxlZnQgMjAwMy0yMDE1IC0gaHR0cDovL3d3dy52aWRlb2xhbi5vcmcv
eDI2NC5odG1sIC0gb3B0aW9uczogY2FiYWM9MSByZWY9MyBkZWJsb2NrPTE6MDowIGFuYWx5c2U9
MHgzOjB4MTEzIG1lPWhleCBzdWJtZT03IHBzeT0xIHBzeV9yZD0xLjAwOjAuMDAgbWl4ZWRfcmVm
PTEgbWVfcmFuZ2U9MTYgY2hyb21hX21lPTEgdHJlbGxpcz0xIDh4OGRjdD0xIGNxbT0wIGRlYWR6
b25lPTIxLDExIGZhc3RfcHNraXA9MSBjaHJvbWFfcXBfb2Zmc2V0PS0yIHRocmVhZHM9NiBsb29r
YWhlYWRfdGhyZWFkcz0xIHNsaWNlZF90aHJlYWRzPTAgbnI9MCBkZWNpbWF0ZT0xIGludGVybGFj
ZWQ9MCBibHVyYXlfY29tcGF0PTAgY29uc3RyYWluZWRfaW50cmE9MCBiZnJhbWVzPTMgYl9weXJh
bWlkPTIgYl9hZGFwdD0xIGJfYmlhcz0wIGRpcmVjdD0xIHdlaWdodGI9MSBvcGVuX2dvcD0wIHdl
aWdodHA9MiBrZXlpbnQ9MjUwIGtleWludF9taW49MjUgc2NlbmVjdXQ9NDAgaW50cmFfcmVmcmVz
aD0wIHJjX2xvb2thaGVhZD00MCByYz1jcmYgbWJ0cmVlPTEgY3JmPTIzLjAgcWNvbXA9MC42MCBx
cG1pbj0wIHFwbWF4PTY5IHFwc3RlcD00IGlwX3JhdGlvPTEuNDAgYXE9MToxLjAwAIAAAA0HZYiE
ADP//vbsvgU1/Z/QlxEsxdpKcD4qpICAdzTAAAADAAADAACG7EIUw97UeeSAAACuk6DvcSW+ABGL
RdQuyaW+kpHvO2xjSSJLw/WLJN8d07jpNfwG5ibC4aGII6t839xvamLnB6cqclmRyXrXy+l3PHuJ
o6HJBZVosPVXKutlwvnDUlYbMlUbxxCWYnJG97PQaQac/N0E96YCXxWHO8zQncZLAYEstp0hc9fG
BvlOL4Rd10w6jStOpEWGmVbSyMg/jjoH+fkQXe7Cv/XUqP3+n3s6WQOaWfkBnDzU2eotwqP2eBAA
B+f7oPw5E8IIz8ztalMvFtoF705cEpMTehchXvigYlatpfW6XC/YCBH0RnhdLaYTPehzrJFjYQfh
Pns+4ObBaVP4ArA+yjZ0dl6WOTmdhv1LOa900BMMTmkL9SM9k7aqKCEqtIH/71SAP7CzW+wyszAZ
qbkrPyLAaVMVFtC4BNk6MEY3ezwoZNEI3GWRkz0f0VgDtbUvD9YIaVzDKEtmBW+mX6Hz0/Xswl8h
jWhx4PMD9lWwSZEdvQy/qFMcIitgyLqfSN1BHQ85r2VoGs46/dcsn+SgiyncWiyJ6ZNczhpBB3EP
Bk+0mrVfhxpdIkkWAKImdEtMe8lceGVf+gWqq7abxXmE/ovsXEM3L/Cked2jwBm1tAcms05ZsUay
cji+yDKPOXkrIgyYTafVdW1VzJa/WG3lvsuBviQQaEFXHXG/ux1+JVjJJMA3lL5ktG06N4vbxjwN
wflKMYa3ZAoX3POgRcv2CQzzWd9O5H8y8U8zq7R8CpJizCZtILbglkJO16Mfw76BOdgsdNkI0KZu
q+pB/bgzPIV3Gpb7ncpjHYCj2t3XpdlTn5hC7+ktuKIqGCqgk7/sHarExVhtoABDArVeBwVu229Y
8SUkGR4FfLiw3T5NakRtccFwIcTpVqPMMKVXJHFse/yoRhaCwNxdKxuGbSvxDhOBDwkPK2phOMWp
rnbVWV30gbSvXPoNvxfe1UCCfREQQBdbtMe9EsFTLNmM8eAjTgkIjhyl5LLq211jwW6sgP7UyRtT
sNV6TuUaR+PCS5swU5i0+fgovlZ6pApT6X2g7Tvs4ib4bbqBTsUB4YXmOtGiozuYzAUZVI66vIrO
Bp2lU4QOfdI5G2hn+vMWkB9oHXXbzLydlioLJ0qLZNS8Z2NHLRI/bChoN/fUu7SQsH8vtOFO9aL/
vy750EyCJbMZ+Tj0KUw7bD7yUR2qrA/pE5wF3zlZLNaepfja//h8VKP3RcKhxvOygazxOrY2WhMi
Trg3mR16jjF1dFqCwvPsJT0Zr6tkCH2a8PFp75GGzAKEPxZJGw5og94RSr+dLkx05P2SfAgDP5tF
aalUy8B2txnHhsH8rAoZkvP2Rdrp5+XXo4nxv1nd97GRPLJMsWQXXHESzWmRJQayMik/bKvzmMqW
UtWQp517+zRqLEalBiEi9gfYFQRFaPclrhqG+7YqWdcGj7Y2jAVZEQ85jgf2jmGF5MzyBabjNb4q
EouS0d8+mMzBGfCT4IdtTM0GKldDwFR6we5MAgrq7dB+TLsnb8UQuSmmSZtlmzEKCI8QZwIebXMq
0K3uTQiDIrOAaOHLQeR/IHOOgIY7QVMP6BaMMQlMOGl7Kb20URlP6/1vvyIPs5T02S6FCjcCTY7p
Y+kScHZvhJeTYv9bHW9X5vk7obTKRGZT2X1inLb4MGl20vAkvsB+0gzm9jw1T7Te7LmmKXYtYprd
eeKH3TLEMrss7H3p+M60blCyGLyJsBMKTYt5NXj5hwXqwxIW0vKYfdttNTQ4Hwu/Fp0twuQPtgR8
FUY2IpV1W8xv7V/aF4esoV3R2fUOeLfLJozzrbSOUULQJrxR2HfvTmXIEIh3geib4sGF4HGRmgyh
/znA2xO/RaM6tayY3GMwkjKaSmqe1u5GulZJOpM3VrEitWfeHY/AK/TZyF3A0FZ4Fxzk0j/eJCZx
radefrSWWriS/om9+c9g6vYCXOhNur/jq0TjaeTka9uEcEHFukLu+vNGXcPDbeOZwvWjYI6lSYe4
tUynxn5LoJy90D2OJcYvx+aBuNy1LI6/skM8SihPhUALMdFmeXK7bp0dkbVdUqIOwKiJDq3OQ2sN
7VqXpD2ZKPJUfcaUAS/MoQuRClpZgBUcUFT94bYnRtFPxhcHiY3vU+y6t71SF2ITQblxhpG+/FcN
wV9k3xoJ9OlJbcMQyJm4GF6wdlPLRVXmSV8KChAetLm2wmm/CnTt9B4asQU5a2m8yi+Z4mk752b2
YQK8H3GmR8K1A+p5u4auACHU+rQ2B09G1H4mAVjiKOSADTXi7HCM4pOD13RAbw5gZEg1red4i/wV
dxbrmD5G6g87XGvT+7WtoyydQ4wpXGNfj4SK2zXJ7w8tEP0VfQyCeFHEfTN9zD1JHB0bU+gXQtPq
bfdk/y+1+5MSXjenQN3MT9UEu4B/BKR8ji/XN83inXT4O2AppZddBHreRVXTZBoZbphlnahUL5pQ
4+p5kvrBW+ttJeaxQYitemflO22UBn7/TKiU2YqhrXPilcM8twaWvz5X++XzT8dtS/TyFNeUAGsN
/elL3vLgAQHlgIJ4J906yrMfZ605VE4z70I6MMBfhOFa5O4Cb0zZry6/Ad1kfaxbXU4FL4/HdMts
sphOXbMa/Mpe2pfaSUCmTXg7O+E1XzQRiGyGGXhf661uUll07vAxGk0LmFqAgzj7JPk2hHlicg/7
fbLc5zkGwxkm/ZdV5HZfOOFhR0LmASoVe3DZi6UzZcPXlZ/rInQ/sivTglfsOndKFGQjEkARIN9i
pBY/Sw3ZeGeCo4LlhMx0YfXwWN+WyYcRhJzkogoKci2vfPkuGnWgigQcHPnja18pquQNbVglMVyZ
I9a3lby9tZLoVU6YeAVD/XPG4eZJrNYn0oQVVu8RZv/yRx1gWXRnSvJ9s3Pk1VVxXmKLfpOdXKNs
LUw9guuxsKMNGN18TAW41OJEbw+a+il4bbH8lLvO6820qkAeQ/ub27x+3/5rclxZiZGjF1kco4Ct
6QX8It7RQauNOYvXy6gj9WuvRXLoKI7l5Qhz2y2dZ6szgSb8lh09S9YHRzA3IeBzqoMaywbRhz/F
F5EZWzAtmwtq72lOz41l/awM2Hae6Nnisd4VsrE2zJbtNr7xWf9UABxIpX6qiunStI9npfGCQL7l
T3eX5PVkpdemq74CPlUEIF+EEcaUqSC/9/+lCmZx6J+oLM8D108Nkz3yHlZNViDBmcJV8jhgXvEW
AbcI7oqyCEXedQJP9ZSLI48q3JoWtF09cKQyHcfYHNxHUXZVmelUcqY+FOi0Hwb6F9TrIBBItO7o
YvUTfp7oQR79W4J8kK2ulOvwPHkLjA8XyGhoLDD9jIYuQsJKO0dIkKp7Xc3vcbNPFb5sxkN2Iu19
rszslXm6qZ5XB9x+3BFbfMqZ4fr4hd2I1EebwUwuOcH41i3BUXYI9pnWzvF54fluyCl4irS5rKW+
92wbr05+nIQb+RBy/6UicQHzggA0atiue/gcCv+8C9JWf6WEc/2SzvQuPGe4BpLu9l8BXIKllEui
2nDBSDag9ZRwOe7XFR9EcHj+WjvhASy1bhTrmGBz1c9EGR7t0EIhRlHqTlsRj3Irbrs6KUV1cr7j
aED4Tzoe7gT5bCmgBts5ka5c1iM0j6/lHXUw4iuHw+S3rqzg/t4NOsWk9QljYqTz/m36gaC8to0L
ASffLYVjgy1o/Puxw2lQRtWqzS1Zce3XSYXb+1X1kQX+LJ0ajFRfsUcTfWMaPTZgTAPU0UxWQ9I+
kd8bv+EhQIeDmZWy8H1wF9qpQm3lyFSaA7m+4M3AhFbujUzq9gl/3LJ+2UVrmvKuv8Z83sww+cGQ
+ayzDzhN71pBW4K8b+Uw8foMKKWp3OFYKdy2SRYk1l2s/oikaCD3M+GSXkLJolcozsOCQpQkDwt/
Nn3dZrccIuTAE5LfjhehKbpc38TGPo0Y8B/OkCNC2Ojwl4l5Z9d3+sX8ODNZ3ZH3ChCifYrrg0oB
f7SmIxRAYlu8dBNGJ+e+zk+T30VktdxFZ1lVpY5+pawvZbwb7gQFrZpHStqsmCrivvKXPCpTN1cd
TKxeRKdaTBeyiLNJgjUb9fn9xhTTSqBufPCimiB/MAeGB93+FOgRaUJvPXtVMygjIOhEKjHWfLyu
wkQTyR7N54IaGxde5TqyzTmmi5cyzWXo9ojNW41m1/+dknSM3w5pHQ69pO2flX6WgK84bp41HWpJ
MgmxKnvF6UccPmYg/5ZQ1Sl3629f5bD363Yz9gyv9imzvDrt5vGSmgDVTRJ2r7BazUYtjJehXlvw
8VC4MqmHKa2DKdJDNR0HMrBQvW+tTqUbfcPZNqHrZ8UhovF+rd3EHU87DIg3/qUzAPfr88cFIgMs
OB2aq1JV1f/UitbjKIAV0sM0aPruJ2tACHkAAAF/QZokbEM//p4QAvg26kAmiw7+FyuQ5+XIUJ/R
pKVfiMhIeZXubyS5hYfj/69AdWSDOTk99ZPR6Sj2x7a202sq5wbfTB5V4lUKVUq/doVzNMNlCaLo
s7pGKPv5pR8/TF24ccg/eQAv/LOwjYcrhfBvsog/hi4eM5MTvm3glrmv5BhWn93/hqktfbjzRFJz
FVlFJZMKsmQ0JKN8vNXp1Ln6sH8+RQ6rX/c5rRsRHxXvXKBxiDFLKH+SnKP0HB5O18JKqvltx6Qs
gtfh5Mw4z9t7lqDLGSgsmCG/WTb08rjJYEVrT4PBe1NhqJf0vCk/ca0OVq0P11gAhI1gW5ck7s34
iv5EhFVLaOS38zAdgps+3x+zQhn7cID00bK9BQUPpNjGv9rOwicIeNMJprA3f3joks9NEAKIpLhg
dsFTcm81BOCUcwbyoMd+I2iPoObXBeiSKZ8Tg5lsvfBCeYO6APMUunQ1RsgNa8JYW6IKfbU6hPqr
/RXeDGg9UaPPtNv78+AAAABYQZ5CeIR/APMBHIFXDd+b/euWltZ/uQYH1BFC8ez7vgeG/+TVXG5k
w0JXI2TB31d8lPD7FVgJ9DhHHMOGCWf4JwzlYANi5p5bxmiREhR7diW0RSQw5iBrOQAAAD0BnmF0
R/8Bh8JeZsKR1Vpl3a5wJABBmOHr3/AB5zq7IipxyNnqjRu+c/gAAbPspn7atO+upmfgBEM2mUY0
AAAANgGeY2pH/wCfZhLPMSfmcqFWi/J+Zlhjh37iUsnzIR3yl7Tccs2qI5u8YTRQACc/4Kq9cpjX
QQAAARxBmmhJqEFomUwIZ//+nhABNUfX1hzGElzIg0WvWDGasX+7b8qL9AEMMNl+qLMko8P6Bh1e
BUqQFl38vuY7RcuQvurcYKvEXUhUt/NjXDUDtcxwRyTUvW/c02r8ZBMZNrjqm5zNSe4dOpdg1Ftw
4SNG+i66pOljX50gSsGJ5iY+Df45un+oEgC6+uFmzTw1A17AucpsP1BiEG39vbuwgFj7xwsqnM8h
jhOyMcRXg7hkthELZXmqyaNAjot0lUf3p5AGdiaM8crdujiv5Vs1mg9wIFz6v8juf3tQIAB/1tmd
oPYBs0QNEBaLCQJ9ssJg2QE2yDRAJxe2c1+lE1N8X+CrI8LYFRXiY5qTcl4Kp/HUV9lT1PtbBl2W
eUAn2QAAAD5BnoZFESwj/wBkiazjlX17yp3t8x7ZybSkTOtdl+lRdCBT67Nq3kPcDdckyMIz+IG+
UNG2JxNFHKKBlI1S/QAAADgBnqV0R/8AnwpNNZCwLy5NdzsyoGa1hTFMQs052a47QbEjB+34DdwP
UuRhoH1AB6RJKAqVlaLvcQAAABsBnqdqR/8AAsWbbzBc5uIiDagkYfELFMXEx18AAACRQZqsSahB
bJlMCGf//p4QAAX21JS70AYAFMffVQU7d1u+J1I7BXjO/apy6wAsVH2KIZfk1Sje6d25N1Vysv1o
ITNlsiMhkLuIOnuKwrao1KVQNyYsu6/0SG6XMdeYQJnMHjGKoDu63vMqfNnbC2XZWVlj45mbJnLj
YrkMLX5y2wMTmWlDQczED5DlIakPzicHoAAAADhBnspFFSwj/wAB5e0cR++w9cFmpUndFLDlyeze
/MCmRKcPaHokaR1fTbRbVsDX0+yikhQIQpUJgQAAACUBnul0R/8AAvsWTOr0/vp1EmMdt3/3ZejX
ZxcyOQUbRiYzjvkPAAAAHAGe62pH/wABLfohB9TInFXcd0+mQ42i+Dn1IJgAAABgQZrwSahBbJlM
CGf//p4QAAXOU+3rAAOJ7WnaJkSZEpyqtwphMbtoPUr6MC9vZ8WGAJS0JaQdmOdTRSsc9u9wfMd+
RWeYt8G1N4PTKBPniGHzTDexco++kGMQs+dqH3OBAAAAH0GfDkUVLCP/AAG6KhhrK+zpeRMIK2sG
qF04doxv+VEAAAAdAZ8tdEf/AALELpijZhLJqZwl9NlrORMcA8JiMccAAAARAZ8vakf/AAEt+iEI
dmc77AgAAAB3QZs0SahBbJlMCGf//p4QAAX1qFIwpMXxh70t5TPKCVe3YyZfyPICZgAF01erzM5N
KyZxriOrzbGCr9eWF1csl+mM4YCrqXmcqr42+ChTLrtAyYTYK06rXswnsxDB0CA/0//+ga3fd4IX
Lv5c76cpmfjWTfb81RAAAAAnQZ9SRRUsI/8AAeaKdv2Wl1KJ5R0t+9KpIX/CtSDykWt1LlD8+FaB
AAAAHQGfcXRH/wABLWPuFYCK+Omcho1nWjum7vITuiHgAAAAIAGfc2pH/wABNgwIoiZTzYi7SQ/0
YI8LbZ8CB+PVf3q2AAAAykGbeEmoQWyZTAhn//6eEAAF9n7lfsUkVWaNp+6fFiTi1MHXgAJx6Dg3
I8GjeVdhJ6/yqycqae/Qjl3gjw6pPUFCGRFAVCtP8NBGKPvfz2MtKetzrdlqYlb10BZp27OyenRT
OOoQVwmFOZG6rbvRSUDOlQfB1DBB05GOYxrywwQ5S6rFhaYNAZ5qGNp/VjxVxrFqJCIWNkVAwXJ+
NEGN7IpkoYFUE+ccchj8lRwo3vKBJdAJ/p8mz8qMsxBkp3AunMNLx09B1OX4CKUAAAA6QZ+WRRUs
I/8AAeXdScGf4BOIlvmlMg5xIuQbQZCJShHElf0bVAlQHQbU1sNQOc65wah1J4JhVpD+8wAAACgB
n7V0R/8AATUwr73VQSN2YWqvstF7osgPrpgl4foIAlvovqokwTuhAAAAIgGft2pH/wABNjmYRmIP
EQnjoPuAYjamPqTVQU3Lz70q5oEAAACIQZu8SahBbJlMCGf//p4QAAX/hOdbcxkf6vgATtq7k/YR
N+YX/A4zKyEzIVLZEG5oeG7BZ2eqSVH3FX5xI40/xVB9tAt81Y0DXl4Rha4eFh75l1rg5bAxxGj2
/rvfrN/9rB4lZgM4swp6X3p4kMK3P5yevi0TOcxDyFVx/kHQkAlkhAf9RwjAYAAAADdBn9pFFSwj
/wAB5e0Y+Nb8vkl+zsigtU7IbU0trt5Soc6vUD2Spq4V8AptYHL4z/AGueRUHNJBAAAAHwGf+XRH
/wABMdLJaVTZ6FB0qBe0jkTy6gI/JVMfYLwAAAA1AZ/7akf/AAMP7P6VoBP8ZSd7N0EeZC4hn4u2
K6L0aEjHAKqSgLclr47LYoAPaQFFSs/RZIEAAADDQZvgSahBbJlMCGf//p4QAAXOwY7uqXpgA/kN
0JR1TVgyD5gfPBg/wmwTevx6ZdAaFSuNd9IRe02RSpn06f/iRinUKgwHJCDOkNftzcw9XktyW/H5
qNX8FC8/XNUJJTeelXf/8TkW++tS1EVg/37tueMDbtZMJ1EkV9zVe2ExUAmWx/Ic5KKQQspaxotz
xd1ZF9YFunbXzayd6NCv3iiPydPTlhSJPUwyhEjJXsH26WWAw3k/CFDclkabmZQxkLPfYfSZAAAA
SUGeHkUVLCP/AAHbeDq2tMVYPbdafUv19YanRYgNKQMtNQOEB7CAahLBIAJUVAp1DOH59t+hvS66
eV8R4LkmgH40mv1qU6U/moAAAAAsAZ49dEf/AAE1F1SYcQN210Elwucr+nuU0rlygghdt55gBCaa
GYZ/n/d3K2AAAAAzAZ4/akf/AAE1evJEHz7nkMVIOJhyMsGmCLttyPAAD9zBmlL1lVMJ8o734KXc
Vn838SnpAAAAmEGaJEmoQWyZTAhn//6eEAAFzsGPiB/tABLUrcogB8SCeFoR2kblNxhEr/PN2A8B
uRqDBI9GYtIfGkDodsD/1b3amW03i4Kpn5A6TePC0ZW1OlXabUoWN6fYh3dmyzKBucOon4HLH9yD
ryqs5V07tAGB2aad9WWziTSk02F/g8eOVF+1UDSb8HQv+EDWFQhlf54hHRzXrBLgAAAASUGeQkUV
LCP/AAHa2akGEcGxe/7EXyGWm326NPBJ+7FgN6dY7Lu+KU1DvCYAXUWl87SjKw0Ob1O4un1qIFsX
AzaqjC8SSXeHltUAAAAyAZ5hdEf/AAE2DvWEWrlqSwAvmgfnaPmv91Bk6xZw1zQuSABLIaDvmxd9
Y1TnbbiQq+kAAAAsAZ5jakf/AAEtewX82WSJYSpExCjqkmqimZ003fb5O/TueVwzTUNj2PgigekA
AADYQZpoSahBbJlMCF///oywAAXaubmAWXg5oA5cMMIChvjhSJFLSu0foTYD/yujBGS1nPbKTF3R
L/nIXEk1hxaqrVJfvioYJ3n9UoUbsowc2Sp4R3Cqkp68ANjI0IR8FVplcZh9qLBPCci/mKEuLkRt
xHtzE4jzrM/yRbtrVS2TKDZzFJwCa/0PpTCc6uD2K9xfYG48/9Q5O4iDI965C1HO8nXWOG753Xdf
qA4cYvdDfbGkKBM/BCPPCnJv0Oe+sOC/fuqUHPPv578FKYBA41dGe7z8vlBNesxhAAAATkGehkUV
LCP/AAHa5Ufp2qIooa/tUPixr3VMKK8FJXi17hJV+ZBl5AF3alSAfzA7hXX0wAgDHHQa1Ob5yDQe
MsgyQ1vl9F7OTUsMVCRSQQAAADcBnqV0R/8AAvthXwZOBZo0B48KeSEenRk3QmJF8VuRTsCGYvKc
2j3FABD5UYGfRwiL5ORSDTItAAAAOAGep2pH/wABNjmUquT7vK01a/PtmKZ6naoydsQALd4/asZ6
h1KerYqCkJuSSMyITm9t/loXbS+4AAAA2UGarEmoQWyZTAhf//6MsAAF3C0hVKNT/doAWpoAe74m
t4nbRPNeMAVq7ump3Ql78te8Tt4bEsnJI9zCGD7IxGbftZhBrGOTGtX3mnccXsfrofxYpGUXJOGd
V2je7Dd7K4SMuDA3V0cOPmO9RwYRRyQ2Hab8O/vpq3TEW64jFzf58hp7gZ6yhgYuYsDNjSPUm8Aw
tiBNWreSj1IAUVXc74dr9gAMErQEXqkfAnzJwTM/WF3m3MZzoHGZWS8KUkBKpbm2m6Ntr3YNXMAZ
PaO/VGBmuDJLJm8yuvAAAAApQZ7KRRUsI/8AAL8pdGoQF2hj41sr3JHsIpdII5UvPlOT0kUC0T5k
8c0AAAAlAZ7pdEf/AAElYcblCwBTEUl1gaIlB0X6bdTL+Fc/U3PFAECggAAAABwBnutqR/8AASX4
1o6amDj7Jo4CGHF0w61VcQdvAAAASUGa8EmoQWyZTAhf//6MsAAFuwAPGjAG3mv6Z3Ju0vBpYC9v
5SkPk5avd7IB8dLXm+yBrYuNaKiz+c/3rW9h3E00KTR9yt4WYr0AAAAfQZ8ORRUsI/8AAMRMHiiw
dkPpmDa0BeEAXCIbSclJgQAAABwBny10R/8AASVhxuULAHI/ziRQd/D3Ss4EZ29BAAAAHAGfL2pH
/wABJfjWdqVRVzaqtAJcEtkD9EN6XVAAAAB4QZsxSahBbJlMCF///oywAAXaIIqAVznWZnkYsw79
uvF//5qQo9hQfaVZQ+wk5/NUpY+FbjDKkFhC1duyY3wg5jPcpl3U4j3B//cbaOUWDDYr5PQ2BsTO
Z9uARZpJxyD+tkmYGCPYUy2P8hr3Gv3vvSMatM6tJcPAAAAAxUGbVUnhClJlMCF//oywAAXb1CFc
dKEwBQBydP7TwOf7CdHcuQtpqB9pHYWEsIlVFDsAmb+zAcnWzppfQQ9LaAtPZ4PMiWngvRwYDBFc
9sVoyNKT1telfSD9fUIMMOj8QSCx9rBjjP1Almaf+9hcToWVo8E1qaLpTS+7zOxXkaxqMKvCHxFN
Gqjk7ReLQqnfTa17qrDbVKeySoWrrQgECqiIjayUJM7Shbz8g0S6Cn070ayASftPsxtGqPA9V83S
aBut89vBAAAAQkGfc0U0TCP/AAHbfKYGL0S+qE7mGgiYx8IrKZRISYM+yKTgAS0/1kj/Tsw0pg5L
Sq7gruvUf9WM9ejyd5S18gGEcAAAACYBn5J0R/8AASVj7hYpyueIrUaNgsdra3K4cVQBOmb3ThZu
44lyoAAAADUBn5RqR/8AASX4WekxnxS4nP1PKt8NhfM6fCKjj3WvJYYegAIAcRNMNzmUZVMAxeZe
hkmajwAAALRBm5ZJqEFomUwIZ//+nhAABc5ab0AXLoCrk53LRthXBzCDrEdPcS1TfLHiDfWDiFYw
ybpsoBfJxmzhKDllT7HAds/n7WVEk/ifmaHEbUwE0O6eTLL8w4864Y/LrLAf8vRilt2WLQG36A41
ccrJJT3aqC+uvJXWxuN9msQxGBKPEJ8PLBja5Zj5NJ5ORvrbCw4eAsH4dwSJx6nS7xWbQAKUZVJ2
Pv8a8YF++AqA6OcK9GMEsRgAAAC8QZu6SeEKUmUwIZ/+nhAABc7AVzKb0ZRQBWqKmZ0KqgyDzLhe
CWDvxXmwjsM9hsnMOn1BX+qmi2orlyx3GdqIYDDJjD0EkanSd29BF6Ga/ausZN7FTo7Q6ZacF71b
c0v0u9/KTNmQJlCBgxojKir+RURoAZKVkCLz+/ZdSzT8uekKHe/PYxC3ZnpcHXl6z3gNw5VhQrNc
IRGhA2ADW7DC7Mzthf21v/wHiwlSOfcIZOuwJqDe1S/uKJXIi2EAAABEQZ/YRTRMI/8AAdrbaTNk
gvClYbBay4x7XuVicgU02D2aSsq2MYsSCjiqNVACWquVFKTz7IslDqdxdvcLPtPrpjN9gwMAAAAz
AZ/3dEf/AAEt3z4zTw5Kuwjo3oXlspIVdJVOHxYHz7nfCT4AJinSC59GoQZNhWlkj3FwAAAAKwGf
+WpH/wABNYC6fENhaa8RmaV8LDnkvkAsHtAOML1h15GtE77AKrOAgkkAAAEnQZv+SahBaJlMCGf/
/p4QAAX/hOeJra3VDa4UwBfjBdFLNJdtNbs1UN1lkDaLjidr4ILKTEwVkcuXSHsQjO3odk46DxHQ
pMcrUY5bx+iTcH133qBlStIHgTnjdA3z4n5xwE/l7ldV9E/T0XvRkVDDwQh2LstdoGkT+gcrG+FM
4rnyedb8d/G5Pz5s6WxhnTBoESvR7x0fyohN3CZphGP07baWi67ZNAuwr4L1aC4caBqT0FjcMhge
u9/IXaISsQz2EipPl6FKnp1WKgSgWJjac6CAFtS3slnn7UjIq9fqTbJa33EiP0X5O23h3LtB670o
jevPVSuklwbO1bFL/Id/flrxL54jjPt3VKY3TwITFlDD7W75k+CNKpk12AI0AtDiYwjPLRC2nAAA
AElBnhxFESwj/wAB2tsors8h0XuWhdEnv17r2pONK+tNioOJnw2bUcg9sAFxWZeB5nH6JuNwAZK1
VDWyGvczFT7ZzCeaxNdSOHQhAAAAMgGeO3RH/wABNgq9MX0ss9DUvyyZr+qP6q4kPUTjuACdYY49
Z0LDvBi0PdsOkDXtc2W1AAAALAGePWpH/wABNYBQXFjbyoHps4g9z+ps71zC3M3cZvitAK8Bo0PG
6kOKIuSAAAAAtEGaIkmoQWyZTAhn//6eEAAF9YBT+7rWQ6A6wBWPD9FJxklx6kBNX6BDZs6t0g/6
kC4lJJqJqmAkRi+lpPs0X4l/wconJieAfudOQw5j7Lh9KfTIG637lSb6wbTg/2jTW5PzIQST4p48
y4H9E9bBdCqhkTSpntYdESQEdjV2gC2yJxPyGns3a9fxeCsbZSeLwsCo9oYnnuEXMz6IVrcigHId
aMoscErsi0Awn7lufLbEy/v+oAAAADpBnkBFFSwj/wAB5uM+TuyrJV7afFXWBdP5C+WkUPATakjz
gQfRn7gttRKtBtJyoefHfz12Jk7pX6shAAAAKgGef3RH/wAC/U5e+3fIm3zcDMOzQRc6sF8ia8kr
9vH47BgyxUNx0tmRYAAAACIBnmFqR/8AAxFQZ27lyawRKbkxD4G5k8eG+aStfDsscF2TAAABAEGa
ZkmoQWyZTAhn//6eEAAF9YXLFuWC+HcAFegRPwcvz6QgdAeXQfU8bk1ruXTbYQmPkXRAFMjIUm5y
E2Q/nYbNsGMIMDYqNc5w7R+riPK5rNkYZNDXlELYiGmxIGDrVdnyJE2Jo5Gy+bsdkCKprie/x0K6
car/By04EqKvdMZ/dTtR+UQ5KkUoxtnJDfMmJ+L1oSmuS7bXU6pMXayIPxATllwJk4WyOvMy20eG
V0qjdt/wZXEfeCwdlv6MRtPB9RN9fFTojp7+jkFIXeo9wHvEv6uLkGhyZDeKolw/0uaHafUViWGM
2YZOGqsYN+CdZ/S7UtjpsjyiF47EhLDlP8AAAAA7QZ6ERRUsI/8AAeXg75mpjKSx2nFTt7kK3zhb
l1vtPFAOoIvCcX7mN/zwO0nwBXLTp17xcriLR19yrKEAAAAiAZ6jdEf/AALELpijXyAEkQuAf3az
dAdwIkeHBPoXcypOaQAAAC0BnqVqR/8AAsVUhMkv9ToebxSnBcxNGzlS++Hq3QcVHuCt4Ej+tQB8
pC+JUUEAAAB+QZqqSahBbJlMCGf//p4QAAX1kquDOaLqZpGiW3i6/kGYFf/soAGuRcgklZs3jxih
x/9iovvtNrS4N9DQ0rc4QvDDrwQHKO/pyvE87+oJHEXCQ6cB/xuymP/UpvlPrLKTEChrjzlsfNya
ztKBrTXQHvF07DwSiiURqq3nVa9RAAAALEGeyEUVLCP/AADEXVPyk6kPE+HDdkBYiUa8QaShcEbN
JAmR1IcDCl+gMTJmAAAAGgGe53RH/wABHWIf+JaDLXrFbdXwZDQxwXuAAAAAGQGe6WpH/wABHfkD
4itG3LkUh5oZf+fvHNEAAABEQZruSahBbJlMCGf//p4QAAX2lb4HqxUasd9BlIBWoeZda6M0/az/
hEdrwAFW0Y9hDsEN+paiUBlwjYGwH1BOLATGKDgAAAAgQZ8MRRUsI/8AAeaKM2+fPgZfUTpGp0/P
gbLXtkmUz+AAAAATAZ8rdEf/AAEdYfbO5ONt2uSL4QAAABkBny1qR/8AAR34/ukG5nT0U1F6xkQb
LLM/AAAAmkGbMkmoQWyZTAhn//6eEAAF9ZAahlTjW2l0gCCcAKlyvKYFeHGnqC3f3mF75Fs3kx2e
chzn2DAZug1v1i3kqSBOIE7yvqQEAdRea3SELVyVnooHa4kdZmvq00KCUiyi8jXfsSQ31PrbDdz4
pXAN1vk2Hz7zLGjoYQmCjoMaYPzPVZU8XSGaTGesCMUzyJ0jDLMRxpJgMUJMJb0AAAAzQZ9QRRUs
I/8AAeZhu5nkdepj/T3zZ2dJuNaW2+PWxz0Sg9fKlgttUQAXcKqopuYbN5VAAAAAGwGfb3RH/wAB
HWIf+IBdPVFx42llSbhX5v7eVAAAACMBn3FqR/8AAvrxgv79a2vfE7i/Plw2Z+RZNn9noicZ2jeD
dQAAAIhBm3ZJqEFsmUwIZ//+nhAABf+E51vYbyz/AB+n5pUbg9Qmh853Ksiv3jJFB63bdsRWTwrA
NN/EoDHBIkUmC1jWxrrwoelzrsJQirAuVRu4A36Ek6JM986/eaCKHmrnWGU/wDQ/ywhJ6Fy0ad2n
REg72X12pEcAd6CjWDSyy6YKNCieOsl+qeCQAAAAP0GflEUVLCP/AAHlcXh+mNUYaoPmQWXUqscF
PXXlq3/eEwOc4lGtqW/ESgDImBA1c0DZR4BKAEnBWemSBzhToQAAACMBn7N0R/8AAxCqG3shZe/4
XceWxoEE5ZjiktuchfEUZ5CtgQAAACYBn7VqR/8AAxBjV/KOHVBpLlBiyaF2SXE/EYc69/4ODVCy
EmzgQAAAAMdBm7pJqEFsmUwIZ//+nhAABdAVQjgnWqygA/T+T7vJ0ymhUQd13et2vqk8nh7/EbJP
y2h3ccwKvQN+B5+wj4UFL4p6IybtnOE5o+oGMFh0D69rhyGF93+U+ZsVIQuG5VyV4XFngtPjG+dK
EhyRedkU7U2MfzNXJNyFu7GutGKBHJ3y5WiTKysB7dNktNfqdAaCUseIOuV4gqY39d5lBhszf3/X
mX3SNtGgiYvRc4RUX7gCJdZ1z3FpDHfpdj9MNI7fx48DapWBAAAAREGf2EUVLCP/AAHbeDfiEW+w
+rUjFBye7fn/dl5RBc75h84vxMUOVAHL92QtMqa4PPaw6nWLv+GAB+JjulccEYg9UcQDAAAANwGf
93RH/wAC/Vj+/KAD6I5MX1VNDP6eYWA281Vswid6wVt8SNA1I79oNa/SOQACcrWIQsYarUAAAAAv
AZ/5akf/AAL7qZhMVnIydceXHfnilQPembiEcE/XMN/28taaADZ9lM/axfbblvEAAACnQZv+SahB
bJlMCGf//p4QAAXOwY+EAo36mwsUsbvDWgBQGPsxz/J33evhPCHiLmmN+YK1f6Y/lkX9tfIhPUX0
b4xq0Fh9mVIto0QM4a72i9wbuuFGLFwqFZte0YWFfdhWnjX2LY0+gt6aHbuLnAp+p56pM7I9bUdm
z/INBRV8ROXNoY1nQ72zPaga3fS1/7WO6jeVjF3R2pg0hrwfgDolezwv6oBaqRAAAABNQZ4cRRUs
I/8AAdrZqQYRwOsQIvNv1NoJF7ubm2VPZtzAN0EXE7Vp94R1ABLIxfLlwn9Pg/v6HtWGKLOzgU8L
V8COIZ9nazCB6xKbQsEAAAAzAZ47dEf/AAL9WP78s9ovfRMdDBuMRNtvAHQKP7pSaABOsG8+EXyJ
6aS693WS4Dj/qJfFAAAAKgGePWpH/wABNXrlRmsIOT1RwOJ/hvP7ZkGXx2cTQJUXxEqxXROtKHda
4AAAALVBmiJJqEFsmUwIZ//+nhAABc7HZL5342fiWG/0mstQgBlkO9NYjhuMsG10eokqO7VwAd6l
tYfe+3jE5qV6fPWrjGSfQ4K3ujAVtsLuBFRyM2mWJG1Y9MtAxt0idfvbrmrA43ZVXI4ihMEFH4q/
WwsrlCiZmZYwlC0pbE0C1vuGNX4iHJMmsKNNP/A0JQaATuoaU+kql+Oqn3jk6T9Ge7QBMrY19w6r
I4BmBleO82YNPSiZtYEgAAAAUUGeQEUVLCP/AAHa3YXrGBVxWplb2iSx0HivJzmFV25fNb3i7hsd
ujPg0SkMptpn0T0ACZpHeHkKrQsgPbfgdtg8sbmqf202kwtxrnAp3s0wSQAAADYBnn90R/8AAtfE
X/m7usZ8upxUlRl/oCJG4qs6I9ulAH9tzEs8gkAAP3EPBdfTKTqSIYhEwhcAAAA1AZ5hakf/AAEl
+ADF2EG3gP0dp9AaxuthVw47Vt33ZLjZf+VABEEqChLT502dW/8WpjlLFdEAAACvQZpmSahBbJlM
CF///oywAAXavyQWcoMV+GcH0A1d73yN1ZouTypoV7dot1eAdmiH9gJJFU8OcLi5ysuRaZ2Mndwq
GYF871EEPk86R8u6asdog9/kalGrdA+gmlON8cMBSBtD8VIbBesugl/fmdBnHwPnjNrKy48wnxYD
OL/ItD8duyaco8I/DBTteHjGA2htEfm1d9VRpvToiVFrborHMJ++3zqLp0fdmMdS823afAAAAFBB
noRFFSwj/wAB2omfhWYPKFkqiUeiUFTtecDrnghQHzMTdkKHntzs1U9JFQAtXbg9A0wFRip5PnAn
ac9DMO2EX5K3X7QGAfvcewxEToAZ8QAAAC8BnqN0R/8AASViIA8+d1rbdHJXqeIDXCmkqVAg3Z1d
pg9qACZpwlEpfaxVZnruBwAAABgBnqVqR/8AASX44mbTG8eDVqJGG/HtsV8AAABUQZqqSahBbJlM
CF///oywAAW2H/cAbD5RJM5mqdA+0+4j3+m4CYPUpt7g46Rmdvi4a7iAN7lLocWSaTca/yd94Ssw
doZuLFVSSgoapf0qBIO/U3aBAAAAIEGeyEUVLCP/AAHaqD4UF7CPfGWv4JI0yFYhMTnIfG0EAAAA
IQGe53RH/wABJWHnVEofi6wH5f9WdHT+d0i8oAVgxGsvMAAAABgBnulqR/8AASX44njr7aFSxhSV
es4AjJMAAACSQZruSahBbJlMCF///oywAAXaFa9f9FeLhPIGANsqkcZBVBL/WWRbi/VbpuqMORHm
sHLWzJ2TMrZX16ybbNM2wFnv7FhNWVHQ4y/Ch42VGSjNpMWzWzPhlMPWVL6/vbzn6wSEajyciY7b
2fI8rUJNC6+biMRARqWI+RmTuz26U+J++2ZJodk89gdhg0IKpSjhWqcAAAAlQZ8MRRUsI/8AAcTl
SUxxi+hZDIMZzjdqsVHGG4biBvOAslu18AAAACUBnyt0R/8AASViFjOpLjR/it4lD8xWyil7EngU
AKwYkOZVU3PNAAAAHAGfLWpH/wABJfj+BmGtZuQ1vBIj/QnmQ03FppkAAACrQZsySahBbJlMCFf/
/jhAABapHx7NYp4AiNk5ey4HgPn4alCJVJitqkQv2e2KVZAZFlVnhdq60PKPg+VxvdkWFjkt1vz/
lopKeSxvg3FzJbTP6K/MTE2wG/27TWBLFNHoIxKXnxg9T5X73FebhFlt4PNUIXTL1+MxyQvzI//t
YEafJElIxLSC2S9ZINq7p2om3wlpoGhQ07GQ7JLzSh4+lQcV6iXE0KOJJoCJAAAARkGfUEUVLCP/
AAHa4RQHPjmizD1gA5RVLS4AhL8DRb48eYApkwroOOvz4AWtZm+0Jlhh/lzkXs03F+lwOWc0woC+
IfPKBWsAAAAuAZ9vdEf/AAE1wCeOyU3XhHAN95GGvrXSXBxU/1awxA+aQYJ3DQAPfap13nQqCAAA
AC4Bn3FqR/8AAvvJFZH9GDxfXisb3sta/YxlzK4W6LGr34JbzS48bHN0s+fiiYgRAAAAi0Gbdkmo
QWyZTAhH//3hAABYWf1MH/gQo2V8xNGjG2PSAo5Zt5OeAQqxCD7ZPkB17+njaI5UnzQ/wU73FwkU
HX2HSqVyEKLnFNyYt4US3A5SFUN0V3faYvZ0wboxM7hmw/V3PS2mw0y2blnnnktIc0M5hhYyXlb1
nyEPMqLTCt6AXVIq3JyxYQfNiMgAAABQQZ+URRUsI/8AAdrbaQWPwbDU5Ge3ut5qvXSqwuAP+ZwA
aYsxDd2uzNJktsnwFNhACWquVXThFX+g/bKgZOmS9PDZwozqzcd8gRk4o9olbcAAAAAnAZ+zdEf/
AALXzv/6ebwYNDAgSDmUxt8mWaC7pEiP153ArDtmvHSdAAAAMQGftWpH/wABNjkduAACHLj01w9S
BzpxEaYm09NS/uH/LUj/dm7wAttA6BqQWTZrAuAAAABaQZu3SahBbJlMCP/8hAABWU/2pFiQATVi
Bsmgp2ePUzIOzpPwvlkazQilgg0J5KbVEU/fI2LAtpwqHCAkK68ubIK5Pg1ZKb6Ioi5RV0st63pw
gvVi9t8afI+BAAAIzm1vb3YAAABsbXZoZAAAAAAAAAAAAAAAAAAAA+gAAAlgAAEAAAEAAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAIAAAf4dHJhawAAAFx0a2hkAAAAAwAAAAAAAAAAAAAAAQAAAAAAAAlgAAAAAAAA
AAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAJAAAABIAAAAAAA
JGVkdHMAAAAcZWxzdAAAAAAAAAABAAAJYAAAAgAAAQAAAAAHcG1kaWEAAAAgbWRoZAAAAAAAAAAA
AAAAAAAAMgAAAHgAVcQAAAAAAC1oZGxyAAAAAAAAAAB2aWRlAAAAAAAAAAAAAAAAVmlkZW9IYW5k
bGVyAAAABxttaW5mAAAAFHZtaGQAAAABAAAAAAAAAAAAAAAkZGluZgAAABxkcmVmAAAAAAAAAAEA
AAAMdXJsIAAAAAEAAAbbc3RibAAAALNzdHNkAAAAAAAAAAEAAACjYXZjMQAAAAAAAAABAAAAAAAA
AAAAAAAAAAAAAAJAASAASAAAAEgAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAABj//wAAADFhdmNDAWQAHv/hABhnZAAerNlAkCWhAAADAAEAAAMAZA8WLZYBAAZo6+PLIsAA
AAAcdXVpZGtoQPJfJE/FujmlG88DI/MAAAAAAAAAGHN0dHMAAAAAAAAAAQAAAHgAAAEAAAAAFHN0
c3MAAAAAAAAAAQAAAAEAAAPQY3R0cwAAAAAAAAB4AAAAAQAAAgAAAAABAAAFAAAAAAEAAAIAAAAA
AQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAAAAAB
AAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEA
AAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAA
AQAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAA
AAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIA
AAAAAQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAA
AAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAACAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAA
AAEAAAEAAAAAAQAAAgAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAUAAAAA
AQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAAB
AAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAAAAEA
AAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAAAQAA
AAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAAAAABAAAC
AAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAUA
AAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAA
AAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAA
AAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAA
AQAAAAAAAAABAAABAAAAAAEAAAIAAAAAHHN0c2MAAAAAAAAAAQAAAAEAAAB4AAAAAQAAAfRzdHN6
AAAAAAAAAAAAAAB4AAAPvQAAAYMAAABcAAAAQQAAADoAAAEgAAAAQgAAADwAAAAfAAAAlQAAADwA
AAApAAAAIAAAAGQAAAAjAAAAIQAAABUAAAB7AAAAKwAAACEAAAAkAAAAzgAAAD4AAAAsAAAAJgAA
AIwAAAA7AAAAIwAAADkAAADHAAAATQAAADAAAAA3AAAAnAAAAE0AAAA2AAAAMAAAANwAAABSAAAA
OwAAADwAAADdAAAALQAAACkAAAAgAAAATQAAACMAAAAgAAAAIAAAAHwAAADJAAAARgAAACoAAAA5
AAAAuAAAAMAAAABIAAAANwAAAC8AAAErAAAATQAAADYAAAAwAAAAuAAAAD4AAAAuAAAAJgAAAQQA
AAA/AAAAJgAAADEAAACCAAAAMAAAAB4AAAAdAAAASAAAACQAAAAXAAAAHQAAAJ4AAAA3AAAAHwAA
ACcAAACMAAAAQwAAACcAAAAqAAAAywAAAEgAAAA7AAAAMwAAAKsAAABRAAAANwAAAC4AAAC5AAAA
VQAAADoAAAA5AAAAswAAAFQAAAAzAAAAHAAAAFgAAAAkAAAAJQAAABwAAACWAAAAKQAAACkAAAAg
AAAArwAAAEoAAAAyAAAAMgAAAI8AAABUAAAAKwAAADUAAABeAAAAFHN0Y28AAAAAAAAAAQAAACwA
AABidWR0YQAAAFptZXRhAAAAAAAAACFoZGxyAAAAAAAAAABtZGlyYXBwbAAAAAAAAAAAAAAAAC1p
bHN0AAAAJal0b28AAAAdZGF0YQAAAAEAAAAATGF2ZjU2LjQwLjEwMQ==
&quot; /&gt;
  Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;And here is what it would look like if the molecule’s vibration had so much energy that it fell apart!&lt;/p&gt;

&lt;video width=&quot;576&quot; height=&quot;288&quot; controls=&quot;&quot; autoplay=&quot;&quot; loop=&quot;&quot;&gt;
  &lt;source type=&quot;video/mp4&quot; src=&quot;data:video/mp4;base64,AAAAHGZ0eXBNNFYgAAACAGlzb21pc28yYXZjMQAAAAhmcmVlAAA0Y21kYXQAAAKuBgX//6rcRem9
5tlIt5Ys2CDZI+7veDI2NCAtIGNvcmUgMTQ4IHIyNjQzIDVjNjU3MDQgLSBILjI2NC9NUEVHLTQg
QVZDIGNvZGVjIC0gQ29weWxlZnQgMjAwMy0yMDE1IC0gaHR0cDovL3d3dy52aWRlb2xhbi5vcmcv
eDI2NC5odG1sIC0gb3B0aW9uczogY2FiYWM9MSByZWY9MyBkZWJsb2NrPTE6MDowIGFuYWx5c2U9
MHgzOjB4MTEzIG1lPWhleCBzdWJtZT03IHBzeT0xIHBzeV9yZD0xLjAwOjAuMDAgbWl4ZWRfcmVm
PTEgbWVfcmFuZ2U9MTYgY2hyb21hX21lPTEgdHJlbGxpcz0xIDh4OGRjdD0xIGNxbT0wIGRlYWR6
b25lPTIxLDExIGZhc3RfcHNraXA9MSBjaHJvbWFfcXBfb2Zmc2V0PS0yIHRocmVhZHM9NiBsb29r
YWhlYWRfdGhyZWFkcz0xIHNsaWNlZF90aHJlYWRzPTAgbnI9MCBkZWNpbWF0ZT0xIGludGVybGFj
ZWQ9MCBibHVyYXlfY29tcGF0PTAgY29uc3RyYWluZWRfaW50cmE9MCBiZnJhbWVzPTMgYl9weXJh
bWlkPTIgYl9hZGFwdD0xIGJfYmlhcz0wIGRpcmVjdD0xIHdlaWdodGI9MSBvcGVuX2dvcD0wIHdl
aWdodHA9MiBrZXlpbnQ9MjUwIGtleWludF9taW49MjUgc2NlbmVjdXQ9NDAgaW50cmFfcmVmcmVz
aD0wIHJjX2xvb2thaGVhZD00MCByYz1jcmYgbWJ0cmVlPTEgY3JmPTIzLjAgcWNvbXA9MC42MCBx
cG1pbj0wIHFwbWF4PTY5IHFwc3RlcD00IGlwX3JhdGlvPTEuNDAgYXE9MToxLjAwAIAAAAjWZYiE
ADP//vbsvgU1/Z/QlxEsxdpKcD4qpICAdzTAAAADAAADAACG7EIUw97UeeSAAACuk6D+0h5/mARi
0XULsmlvpKot7Sz4frb8o2+zU/16U/z9F1Rb1AJWa68axPMz9HbCQ5fl+fnnxTDzaj+/4OO6bKuf
BlEweZ/w/VDAvias5Y421HQcLXLv2orVR/HfGLDgB/K6+wZY44AAS0XFjKuQ+4xFhJ5Z1YWIgmpj
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
AAAAAAAAAQAACWAAAAIAAAEAAAAAB3BtZGlhAAAAIG1kaGQAAAAAAAAAAAAAAAAAADIAAAB4AFXE
AAAAAAAtaGRscgAAAAAAAAAAdmlkZQAAAAAAAAAAAAAAAFZpZGVvSGFuZGxlcgAAAAcbbWluZgAA
ABR2bWhkAAAAAQAAAAAAAAAAAAAAJGRpbmYAAAAcZHJlZgAAAAAAAAABAAAADHVybCAAAAABAAAG
23N0YmwAAACzc3RzZAAAAAAAAAABAAAAo2F2YzEAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAACQAEg
AEgAAABIAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY//8AAAAxYXZj
QwFkAB7/4QAYZ2QAHqzZQJAloQAAAwABAAADAGQPFi2WAQAGaOvjyyLAAAAAHHV1aWRraEDyXyRP
xbo5pRvPAyPzAAAAAAAAABhzdHRzAAAAAAAAAAEAAAB4AAABAAAAABRzdHNzAAAAAAAAAAEAAAAB
AAAD0GN0dHMAAAAAAAAAeAAAAAEAAAIAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAA
AAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAA
AAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAA
AQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAAAAAB
AAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEA
AAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAA
AQAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAA
AAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIA
AAAAAQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAA
AAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAA
AAEAAAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAA
AQAAAQAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAAB
AAAAAAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEA
AAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAA
BQAAAAABAAACAAAAAAEAAAAAAAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAAB
AAAAAAEAAAUAAAAAAQAAAgAAAAABAAAAAAAAAAEAAAEAAAAAAQAABQAAAAABAAACAAAAAAEAAAAA
AAAAAQAAAQAAAAABAAAFAAAAAAEAAAIAAAAAAQAAAAAAAAABAAABAAAAAAEAAAQAAAAAAQAAAgAA
AAABAAAAAAAAABxzdHNjAAAAAAAAAAEAAAABAAAAeAAAAAEAAAH0c3RzegAAAAAAAAAAAAAAeAAA
C4wAAAFYAAAAbQAAAFcAAABRAAABCgAAAFgAAABIAAAARgAAAPMAAABXAAAARwAAAD8AAADdAAAA
UQAAADMAAAA6AAABDAAAAEsAAAA4AAAAMwAAAOUAAABDAAAALwAAADIAAAD4AAAAUwAAAD4AAABC
AAAA5wAAAD8AAAA+AAAALwAAAPAAAAA9AAAANAAAADoAAACsAAAAPgAAADcAAAA4AAAApQAAADwA
AAA3AAAANgAAAMMAAAA/AAAANQAAADYAAACmAAAAPwAAADYAAAA3AAAAqgAAAEIAAAA0AAAAMwAA
ALsAAAA+AAAAMgAAADIAAAC4AAAAUgAAADYAAAA8AAAAhQAAAFcAAAA6AAAAOQAAAPQAAABeAAAA
RAAAADwAAACjAAAAQgAAAEMAAAAxAAAAfAAAADkAAAAvAAAALQAAAM4AAABAAAAALwAAAC0AAAB6
AAAAMwAAACkAAAAqAAAAoAAAADEAAAAmAAAAKAAAAG0AAAAwAAAAKAAAACkAAABlAAAAOAAAACkA
AAAkAAAAZgAAADMAAAAnAAAAJwAAAGQAAAA0AAAAKQAAACkAAABvAAAAQwAAACwAAAArAAAATQAA
AEwAAAA2AAAALAAAACwAAAAeAAAAJgAAABRzdGNvAAAAAAAAAAEAAAAsAAAAYnVkdGEAAABabWV0
YQAAAAAAAAAhaGRscgAAAAAAAAAAbWRpcmFwcGwAAAAAAAAAAAAAAAAtaWxzdAAAACWpdG9vAAAA
HWRhdGEAAAABAAAAAExhdmY1Ni40MC4xMDE=
&quot; /&gt;
  Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;Note that the second case has a much shallower potential well. This explains what IUPAC means when they say,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;depression on the potential energy surface that is deep enough to confine at least one vibrational state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our second gif, the molecule’s well is so shallow that the atoms just fall apart!&lt;/p&gt;

&lt;p&gt;But in the first gif, the well is deeper and the atoms get trapped inside! We have a &lt;strong&gt;stable&lt;/strong&gt; molecule, which is the question we tried to answer!&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">The Scientific Computing Toolkit for Python</title><link href="http://localhost:4000/2016/10/26/The-Scientific-Computing-Toolkit-for-Python.html" rel="alternate" type="text/html" title="The Scientific Computing Toolkit for Python" /><published>2016-10-26T00:00:00-05:00</published><updated>2016-10-26T00:00:00-05:00</updated><id>http://localhost:4000/2016/10/26/The-Scientific-Computing-Toolkit-for-Python</id><content type="html" xml:base="http://localhost:4000/2016/10/26/The-Scientific-Computing-Toolkit-for-Python.html">&lt;p&gt;&lt;img src=&quot;/assets/posts/2016-10-26-The-Scientific-Computing-Toolkit-for-Python/output_55_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;script src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;This presentation is no help if you can’t get the python packages it uses! There are a few options here. If you’re not already set up, probably the easiest way to install python packages is &lt;a href=&quot;https://pip.pypa.io/en/stable/&quot;&gt;pip&lt;/a&gt;. If you don’t already have it, here are &lt;a href=&quot;https://packaging.python.org/installing/#install-pip-setuptools-and-wheel&quot;&gt;installation instructions&lt;/a&gt;. I’m a big fan of the &lt;a href=&quot;https://www.continuum.io/&quot;&gt;anaconda&lt;/a&gt; python distrubution, which comes pre-loaded with basically everything I’m using today. Just use whatever works for you.&lt;/p&gt;

&lt;p&gt;For example, installing numpy is easy, in a command line:&lt;/p&gt;

&lt;p&gt;pip install numpy&lt;/p&gt;

&lt;p&gt;If you’re using anaconda, you can also use their package manager:&lt;/p&gt;

&lt;p&gt;conda install numpy&lt;/p&gt;

&lt;p&gt;Pip is probably the preferred method, even when you’re using anaconda. The packages I’m discussing today are &lt;a href=&quot;http://www.numpy.org/&quot;&gt;numpy&lt;/a&gt;, &lt;a href=&quot;https://www.scipy.org/&quot;&gt;scipy&lt;/a&gt;, &lt;a href=&quot;http://pandas.pydata.org/&quot;&gt;pandas&lt;/a&gt;, &lt;a href=&quot;http://matplotlib.org/&quot;&gt;matplotlib&lt;/a&gt;, &lt;a href=&quot;https://seaborn.github.io/&quot;&gt;seaborn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Other useful tools are &lt;a href=&quot;http://numba.pydata.org/&quot;&gt;Numba&lt;/a&gt; and &lt;a href=&quot;http://cython.org/&quot;&gt;Cython&lt;/a&gt;. As far as I know, all of these are in both package managers.&lt;/p&gt;

&lt;p&gt;I’ve recently been told that pandas depends on cython and seaborn depends on pandas.&lt;/p&gt;

&lt;p&gt;You should therefore install cython -&amp;gt; pandas -&amp;gt; seaborn in that order.&lt;/p&gt;

&lt;p&gt;This talk was made using a &lt;a href=&quot;http://jupyter.org/&quot;&gt;jupyter&lt;/a&gt; notebook.&lt;/p&gt;

&lt;h2 id=&quot;python-is-slow-why-bother&quot;&gt;Python is slow! Why bother?&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;This is a common reason people want to avoid python, and it’s half true. See for example this function that performs a matrix multiplication:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mat1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mat2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mmult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mat3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;     
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;  
                &lt;span class=&quot;n&quot;&gt;mat3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat3&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mmult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CPU times: user 3.78 s, sys: 0 ns, total: 3.78 s
Wall time: 3.78 s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Well that doesn’t seem so bad! This would take longer to do by hand! It actually is pretty slow.  &lt;a href=&quot;https://jakevdp.github.io/blog/2014/05/09/why-python-is-slow/&quot;&gt;Here’s&lt;/a&gt;
a look at some of the reasons why. It has to do with the fact that python is dynamically typed and interpreted, rather than compiled. Additionally, the arrays in native python aren’t laid out in one chunk of memory.&lt;/p&gt;

&lt;h2 id=&quot;it-doesnt-have-to-be-this-way-numpy-section&quot;&gt;It doesn’t have to be this way! (Numpy section)&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;If you’re going to be doing serious numerical work in python, numpy is essential. If you’re doing a lot of work with arrays, the performance difference between raw python and C/C++/Fortran can easily be several orders of magnitude. Numpy is focused on fast, efficient manipulation of arrays. They can be any size, any dimension as long as your computer can store it. Numpy methods are compiled and very efficient (comparable to compiled code). Let’s take a look at our matrix multiply again:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# convention&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;npmat1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# use numpy arrays, they are contiguous in memory&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;npmat2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;npmat3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;npmat1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;npmat2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# dot is used for dot product or matrix multiply&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CPU times: user 4 ms, sys: 4 ms, total: 8 ms
Wall time: 5.86 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;WHOA! Blazing fast! Morale of the story: if there is a numpy function to do it, use it! And there  is a numpy function for a lot of stuff, here’s a few useful ones:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.linalg.eig.html&quot;&gt;np.linalg.eig&lt;/a&gt; - eigenvectors/values&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.scipy.org/doc/numpy/reference/generated/numpy.zeros.html&quot;&gt;np.zeros&lt;/a&gt; - create an array of zeros&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.scipy.org/doc/numpy/reference/generated/numpy.linspace.html&quot;&gt;np.linspace&lt;/a&gt; - create an array of values spaced linearly between 2 endpoints&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.scipy.org/doc/numpy-1.10.1/reference/generated/numpy.sort.html&quot;&gt;np.sort&lt;/a&gt; - Sort an array&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.scipy.org/doc/numpy/reference/generated/numpy.amax.html&quot;&gt;np.amax&lt;/a&gt; - Return maximum value of array&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.scipy.org/doc/numpy/reference/generated/numpy.random.rand.html&quot;&gt;np.random.rand&lt;/a&gt; - create array of random values in [0, 1)&lt;/p&gt;

&lt;p&gt;There’s about 3 trillion more …&lt;/p&gt;

&lt;h2 id=&quot;a-few-useful-tips-about-numpy-arrays&quot;&gt;A few useful tips about numpy arrays:&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;1-most-normal-operations-are-element-wise&quot;&gt;1) Most ‘normal’ operations are element-wise:&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[[11 12 13]
 [14 15 16]
 [17 18 19]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[[ 2  4  6]
 [ 8 10 12]
 [14 16 18]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[[False False False]
 [False  True False]
 [False False False]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[[11 22 33]
 [44 55 66]
 [77 88 99]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-you-can-slice-numpy-arrays&quot;&gt;2) You can ‘slice’ numpy arrays&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 3rd column (starts at 0)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[[1 2 3]
 [4 5 6]
 [7 8 9]] 

[3 6 9]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;#Second row&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[4 5 6]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Top-Left 2x2 section&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[[1 2]
 [4 5]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-you-can-index-a-numpy-array-with-a-numpy-array&quot;&gt;3) You can index a numpy array… with a numpy array&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;indices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[[1 2 3]
 [4 5 6]
 [7 8 9]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# first and third row&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[[1 2 3]
 [7 8 9]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# first and third column&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[[1 3]
 [4 6]
 [7 9]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;indices2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indices2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# All elements where indices2 is True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[[1 2 3]
 [4 5 6]
 [7 8 9]] 

[1 2 5 6]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-and-you-can-combine-operations&quot;&gt;4) And you can combine operations&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;symmetric&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;asymmetric&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Maybe to check if a matrix is symmetric&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symmetric&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symmetric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asymmetric&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asymmetric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# WARNING if using floats, compare&lt;/span&gt;
                                    &lt;span class=&quot;c&quot;&gt;# with np.isclose(x.T, x)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or to sort eigenvales and eigenvectors so that the eigenvalues are in ascending order, and you keep track of the vectors!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vecs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linalg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symmetric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;indices_of_sorted_vals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argsort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indices_of_sorted_vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;     
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indices_of_sorted_vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# columns are rearranged&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[-3.  9. -3.]
[[-0.81649658  0.57735027  0.19219669]
 [ 0.40824829  0.57735027 -0.7833358 ]
 [ 0.40824829  0.57735027  0.59113912]]


[-3. -3.  9.]
[[-0.81649658  0.19219669  0.57735027]
 [ 0.40824829 -0.7833358   0.57735027]
 [ 0.40824829  0.59113912  0.57735027]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;scipy&quot;&gt;Scipy&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;We’re all scientists here, so It would be silly to avoid scipy. It’s a library of scientifically relevant tools. Here’s a list of some of the submodules:&lt;/p&gt;

&lt;p&gt;Special functions (scipy.special)&lt;/p&gt;

&lt;p&gt;Integration (scipy.integrate)&lt;/p&gt;

&lt;p&gt;Optimization (scipy.optimize)&lt;/p&gt;

&lt;p&gt;Interpolation (scipy.interpolate)&lt;/p&gt;

&lt;p&gt;Fourier Transforms (scipy.fftpack)&lt;/p&gt;

&lt;p&gt;Signal Processing (scipy.signal)&lt;/p&gt;

&lt;p&gt;Linear Algebra (scipy.linalg)&lt;/p&gt;

&lt;p&gt;Sparse Eigenvalue Problems with ARPACK&lt;/p&gt;

&lt;p&gt;Compressed Sparse Graph Routines (scipy.sparse.csgraph)&lt;/p&gt;

&lt;p&gt;Spatial data structures and algorithms (scipy.spatial)&lt;/p&gt;

&lt;p&gt;Statistics (scipy.stats)&lt;/p&gt;

&lt;p&gt;Multidimensional image processing (scipy.ndimage)&lt;/p&gt;

&lt;p&gt;File IO (scipy.io)&lt;/p&gt;

&lt;p&gt;Weave (scipy.weave)&lt;/p&gt;

&lt;p&gt;The various python modules make it super easy to do lots of things, like making a function that returns the nth harmonic oscillator wavefunction:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scipy.special&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hermite&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;psi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If I try to cover all of scipy it will get boring fast… you can look up functions as you need them&lt;/p&gt;

&lt;h2 id=&quot;matplotlib&quot;&gt;Matplotlib&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;Matplotlib is the tool to go to for quick plotting stuff in Python. It can handle 2D, 3D, and even animations.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Jupyter  &quot;Magic&quot;, just so you see the images in the notebook&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matplotlib&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline&lt;/span&gt; 

&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# list of x from 0 to 10 by 100 steps&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                 &lt;span class=&quot;c&quot;&gt;# take the sign of each element in x&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                &lt;span class=&quot;c&quot;&gt;# do I have to explain this one?&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2016-10-26-The-Scientific-Computing-Toolkit-for-Python/output_30_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To plot multiple things at once, call plt.plot() more than once&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;plot_HO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# plot N wavefunctions&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;


    &lt;span class=&quot;n&quot;&gt;ymax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;xmax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ymax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# figuring out plot ranges&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;                       &lt;span class=&quot;c&quot;&gt;# from n = [0...N)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;psi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# Plot the wavefunction offset by&lt;/span&gt;
                                             &lt;span class=&quot;c&quot;&gt;# energy&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'k'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Plot the potential&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ymax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plot_HO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2016-10-26-The-Scientific-Computing-Toolkit-for-Python/output_32_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Matplotlib has functions for scatterplots, pie charts, bar graphs, heatmaps blah blah blah…&lt;/p&gt;

&lt;h2 id=&quot;pandas&quot;&gt;Pandas&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;I recently started using Pandas in my research, and It’s already proven incredibly useful for data analysis. The library is focused on the Series and the DataFrame.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;series1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;series1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0     4.0
1     2.5
2     8.0
3    72.0
dtype: float64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I don’t know about you, but this isn’t the most impressive thing to me… just hold on.&lt;/p&gt;

&lt;p&gt;Here’s an example of a DataFrame, the reason I’m in love with this library&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Cols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Rain'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Temperature'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Wind'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Dates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'20161020'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;periods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 3 cols 10 rows&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div&gt;
&lt;style scoped=&quot;&quot;&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr style=&quot;text-align: right;&quot;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Rain&lt;/th&gt;
      &lt;th&gt;Temperature&lt;/th&gt;
      &lt;th&gt;Wind&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-10-20&lt;/th&gt;
      &lt;td&gt;0.193955&lt;/td&gt;
      &lt;td&gt;0.350702&lt;/td&gt;
      &lt;td&gt;0.618494&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-10-21&lt;/th&gt;
      &lt;td&gt;0.707791&lt;/td&gt;
      &lt;td&gt;0.823698&lt;/td&gt;
      &lt;td&gt;0.548552&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-10-22&lt;/th&gt;
      &lt;td&gt;0.851024&lt;/td&gt;
      &lt;td&gt;0.983293&lt;/td&gt;
      &lt;td&gt;0.709565&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-10-23&lt;/th&gt;
      &lt;td&gt;0.434959&lt;/td&gt;
      &lt;td&gt;0.669047&lt;/td&gt;
      &lt;td&gt;0.405353&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-10-24&lt;/th&gt;
      &lt;td&gt;0.398242&lt;/td&gt;
      &lt;td&gt;0.252898&lt;/td&gt;
      &lt;td&gt;0.604027&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-10-25&lt;/th&gt;
      &lt;td&gt;0.620698&lt;/td&gt;
      &lt;td&gt;0.142928&lt;/td&gt;
      &lt;td&gt;0.551496&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-10-26&lt;/th&gt;
      &lt;td&gt;0.438231&lt;/td&gt;
      &lt;td&gt;0.620494&lt;/td&gt;
      &lt;td&gt;0.525627&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-10-27&lt;/th&gt;
      &lt;td&gt;0.424516&lt;/td&gt;
      &lt;td&gt;0.189178&lt;/td&gt;
      &lt;td&gt;0.570212&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-10-28&lt;/th&gt;
      &lt;td&gt;0.093206&lt;/td&gt;
      &lt;td&gt;0.278414&lt;/td&gt;
      &lt;td&gt;0.980758&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-10-29&lt;/th&gt;
      &lt;td&gt;0.429858&lt;/td&gt;
      &lt;td&gt;0.857150&lt;/td&gt;
      &lt;td&gt;0.886912&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Rain'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Grab all the stuff in 'Rain' column&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2016-10-20    0.193955
2016-10-21    0.707791
2016-10-22    0.851024
2016-10-23    0.434959
2016-10-24    0.398242
2016-10-25    0.620698
2016-10-26    0.438231
2016-10-27    0.424516
2016-10-28    0.093206
2016-10-29    0.429858
Freq: D, Name: Rain, dtype: float64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'2016-10-23'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# locate this date&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Rain           0.434959
Temperature    0.669047
Wind           0.405353
Name: 2016-10-23 00:00:00, dtype: float64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# grab the 3rd row&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Rain           0.851024
Temperature    0.983293
Wind           0.709565
Name: 2016-10-22 00:00:00, dtype: float64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Plot all the stuff&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f67de0d2e80&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2016-10-26-The-Scientific-Computing-Toolkit-for-Python/output_41_1.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Rain'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Temperature'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2016-10-26-The-Scientific-Computing-Toolkit-for-Python/output_42_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can find data by name and apply an operation to it, like checking which days had small amounts of rain:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Rain'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2016-10-20    False
2016-10-21    False
2016-10-22    False
2016-10-23    False
2016-10-24    False
2016-10-25    False
2016-10-26    False
2016-10-27    False
2016-10-28     True
2016-10-29    False
Freq: D, Name: Rain, dtype: bool
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hmm, that’s pretty nice isn’t it? What if we could easily select only the parts that satisfy our condition? ….&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Rain'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div&gt;
&lt;style scoped=&quot;&quot;&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr style=&quot;text-align: right;&quot;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Rain&lt;/th&gt;
      &lt;th&gt;Temperature&lt;/th&gt;
      &lt;th&gt;Wind&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-10-28&lt;/th&gt;
      &lt;td&gt;0.093206&lt;/td&gt;
      &lt;td&gt;0.278414&lt;/td&gt;
      &lt;td&gt;0.980758&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Ok that’s pretty neat. I think this alone is useful. But we’re just getting started!&lt;/p&gt;

&lt;p&gt;What if we could find all parts of our data frame that satisfy a given condition, then plot two other columns of that data? Say no more…&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;TempsAbove&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Temperature'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;TempsAbove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Rain'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Wind'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2016-10-26-The-Scientific-Computing-Toolkit-for-Python/output_48_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The reason I like this library so much is that you can use the past few examples, combining them as you wish, and analyze huge amounts of data in seconds. Lately I’ve written a function to do a custom plot on each row of a dataframe (optionally you can apply a condition to a dataframe and pass that through). I take my output files, parse them and put them into a dataframe. This lets me go from a directory of output files to a ton of plots in seconds, with little effort.&lt;/p&gt;

&lt;h2 id=&quot;seaborn&quot;&gt;Seaborn&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;*Update: As of matplotlib 2.0, the style defaults there are actually good. Seaborn is now less useful if you’re not doing statistical plots. *&lt;/p&gt;

&lt;p&gt;Let’s face it: I’ve been to enough talks to know that most people don’t know how to make visually appealing figures. Well the good news is that you don’t have to. Trust in Seaborn, for it is magnificent.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;seaborn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# importing changes defaults&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[&amp;lt;matplotlib.lines.Line2D at 0x7f67ddf5d3c8&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2016-10-26-The-Scientific-Computing-Toolkit-for-Python/output_51_1.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is the default with nothing done, the library was made to have nice colorschemes out of the box, but I prefer a less intrusive background&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'white'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[&amp;lt;matplotlib.lines.Line2D at 0x7f67dafe6cf8&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2016-10-26-The-Scientific-Computing-Toolkit-for-Python/output_53_1.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Remember our harmonic oscillator plots?&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plot_HO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2016-10-26-The-Scientific-Computing-Toolkit-for-Python/output_55_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are a lot of built in plots, mostly for discrete data points and statistics. I mostly use the color palettes and things like that, but if you need to do statistical plots, look no further&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Cols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Rain'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Temperature'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Wind'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Dates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'20161020'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;periods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scipy.signal&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gaussian&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gaussian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;         
&lt;span class=&quot;n&quot;&gt;Temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;6.28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Wind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rain&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Temp&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wind&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;df2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2016-10-26-The-Scientific-Computing-Toolkit-for-Python/output_57_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jointplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Rain'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Wind'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;seaborn.axisgrid.JointGrid at 0x7f67ddffb320&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2016-10-26-The-Scientific-Computing-Toolkit-for-Python/output_58_1.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;cols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Abs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Conc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Molecule'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Temp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Temps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Molecules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Blue Dye'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Orange Dye'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Absorptivity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# whatever units makes this reasonable&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Concs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Temps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Molecules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conc&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Concs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Absorptivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;273&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.05&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Molecules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            
&lt;span class=&quot;n&quot;&gt;AbsDF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lmplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Conc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Abs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Molecule'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
           &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Temp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AbsDF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col_wrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2016-10-26-The-Scientific-Computing-Toolkit-for-Python/output_59_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Wrapping a C++ Class in Python Using Cython</title><link href="http://localhost:4000/2016/08/21/Wrap-C++-Class-Using-Cython.html" rel="alternate" type="text/html" title="Wrapping a C++ Class in Python Using Cython" /><published>2016-08-21T00:00:00-05:00</published><updated>2016-08-21T00:00:00-05:00</updated><id>http://localhost:4000/2016/08/21/Wrap-C++-Class-Using-Cython</id><content type="html" xml:base="http://localhost:4000/2016/08/21/Wrap-C++-Class-Using-Cython.html">&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One of my favorite uses for Cython is to use it to wrap a C++ class in python.
The reason I like this so much is that you can easily create a class in python,
and seamlessly optimize the slow parts in C++. This way you can get all the
advantages of python, like the easy syntax and massive amount of libraries that
are trivial to implement, while still being able to speed up performance critical
 sections of your code. However, at the end of the day, the resulting class
still looks like a standard python class, just better!&lt;/p&gt;

&lt;p&gt;Now there is a tutorial on &lt;a href=&quot;http://cython.readthedocs.io/en/latest/src/userguide/wrapping_CPlusPlus.html&quot;&gt;wrapping C++ in the Cython documentation&lt;/a&gt;,
which looks pretty good in retrospect. However, I struggled a bit when I was
trying to learn how to do this, so I decided to write this post to help anybody
else in my situation. Enough blabbering though, let’s get to it!&lt;/p&gt;

&lt;h1 id=&quot;step-1-create-the-c-class&quot;&gt;Step 1: Create the C++ Class&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;Let’s say we defined a C++ class in the following header file, Class.h. I’ve
made the class pretty trivial for the purpose of demonstration:&lt;/p&gt;

&lt;h2 id=&quot;classh&quot;&gt;Class.h&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef CPP_MYCLASS // header guards
#define CPP_MYCLASS
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_namespace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyCppClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//Attributes
&lt;/span&gt;            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpp_double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpp_public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//Methods
&lt;/span&gt;            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpp_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;cpp_void_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In addition to the header file, we have defined the following implementation of
the class methods in Class.cpp:&lt;/p&gt;

&lt;h2 id=&quot;classcpp&quot;&gt;Class.cpp&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;Class.h&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_namespace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyCppClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_namespace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyCppClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp_void_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cpp_double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Again the functions here are simple, but they can be any valid C++ function
(there are caveats which are discussed in Cython’s documentation, but I haven’t
had problems).&lt;/p&gt;

&lt;h1 id=&quot;step-2-wrap-the-class-using-cython&quot;&gt;Step 2: Wrap the Class using Cython&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;Now this part is the meat of the problem. At first it’s a bit intimidating and
confusing to see all these variable declarations in the cpp, header and pyx
files. Once you get a handle on it it’s not too bad though. Additionally, the
redundant variable declarations could be automated (I might do this in a future
post).&lt;/p&gt;

&lt;h2 id=&quot;classwrapperpyx&quot;&gt;ClassWrapper.pyx&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; All the code in step 2 goes into &lt;em&gt;ClassWrapper.pyx&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First, we have to let Cython know that the class &lt;em&gt;MyCppClass&lt;/em&gt; is defined inside
the file &lt;em&gt;Class.h&lt;/em&gt;. The keyword &lt;em&gt;extern&lt;/em&gt; here lets us know that the class is
defined elsewhere (ie. in the header file). Using this keyword in Cython like
this implies the entire class and all attributes/methods within are defined
externally in &lt;em&gt;Class.h&lt;/em&gt;. Note that only methods/attributes that want python
access need to be here.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;except +&lt;/em&gt; part allows Cython to handle exceptions from the constructor.
Apart from this, the class definition is identical to the one in &lt;em&gt;Class.h&lt;/em&gt;,
except for there is no ; at the end of each line.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;cdef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Class.h&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;my_namespace&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cdef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cppclass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyCppClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MyCppClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;#Attributes
&lt;/span&gt;        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpp_double&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpp_public&lt;/span&gt;

        &lt;span class=&quot;cp&quot;&gt;#Methods
&lt;/span&gt;        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpp_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpp_void_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;create-the-wrapper-class&quot;&gt;Create the Wrapper Class&lt;/h3&gt;

&lt;p&gt;Ok, so we’ve told Cython that &lt;em&gt;MyCppClass&lt;/em&gt; is defined elsewhere. If we want
python access to the class (which we do, if you’ve read this far) we have to
create a wrapper class around the C++ class. I treat this first portion as
boilerplate, it allows us to allocate a new instance of &lt;em&gt;MyCppClass&lt;/em&gt; when we
instantiate &lt;em&gt;WrapperClass&lt;/em&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;cdef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WrapperClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cdef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyCppClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C_Class&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__cinit__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_Class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyCppClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__dealloc__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_Class&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we allow for instantiation of the class from python, we can define all
sorts of member functions and attributes &lt;strong&gt;&lt;em&gt;just as we would for a standard
python class&lt;/em&gt;&lt;/strong&gt;. So we can define the &lt;strong&gt;__init__&lt;/strong&gt; function to set up some
attributes with a value at the time of instantiation (we’ll get to
&lt;em&gt;self.Mydouble&lt;/em&gt;, I promise).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mydouble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s the boring part though. Here’s the magic. We can define a python-style
function (note the &lt;em&gt;def&lt;/em&gt; and not &lt;em&gt;cdef&lt;/em&gt;) which casts the input to the appropriate
 c-type and then calls the &lt;em&gt;C++ level function&lt;/em&gt; of our choice. I have examples
here of a function that returns a double and a void function. Additionally, we
can just use regular python here if we wish (for functions which don’t need to be sped up by C++).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;        
    &lt;span class=&quot;n&quot;&gt;cdef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cdef&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;c_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;void_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp_void_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;python_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;define-properties-allows-for-settinggetting-them-in-python&quot;&gt;Define properties, allows for setting/getting them in python&lt;/h3&gt;
&lt;p&gt;If you jumped the gun and tried to do this already, you might have noticed that
you don’t have access to the C++ variables directly from python. This is because
 we’re defining a wrapper class, whos attributes are only the ones we define
within the scope of &lt;em&gt;WrapperClass&lt;/em&gt;. If we want to have read/write access to the
C++ level variables, we can use the python property function to do what we want.&lt;/p&gt;

&lt;p&gt;Just define a function to set the C++ level variable and another one to get it
like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_cpp_double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp_double&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_cpp_double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cdef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp_double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And the property function takes care of the rest:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;Mydouble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_cpp_double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set_cpp_double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So now we have an attribute of &lt;em&gt;WrapperClass&lt;/em&gt; called &lt;em&gt;Mydouble&lt;/em&gt;. However,
&lt;em&gt;Mydouble&lt;/em&gt; is basically an alias for the C++ level attribute &lt;em&gt;cpp_double&lt;/em&gt;. If
you want to use the same names for C++ and Python variables, see the guide
&lt;a href=&quot;http://cython.readthedocs.io/en/latest/src/userguide/external_C_code.html#resolve-conflicts&quot;&gt;here&lt;/a&gt;
, but I’ll just use different names for now.&lt;/p&gt;

&lt;p&gt;Once the property defined in the .pyx file, you can use it within the wrapper
class as though it were a python variable (see &lt;em&gt;self.Mydouble&lt;/em&gt; in __init__).&lt;/p&gt;

&lt;h1 id=&quot;3-compile&quot;&gt;3) Compile&lt;/h1&gt;

&lt;p&gt;The easiest way to compile our Cython code is to use &lt;em&gt;distutils&lt;/em&gt; and &lt;em&gt;cythonize&lt;/em&gt;
in a python script. Simply include all the source files and make sure the
compiler knows to use C++.&lt;/p&gt;

&lt;h2 id=&quot;setuppy&quot;&gt;Setup.py&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;distutils.core&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cython.Build&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cythonize&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;distutils.extension&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Extension&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sourcefiles&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ClassWrapper.pyx'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Class.cpp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;compile_opts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'-std=c++11'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Extension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sourcefiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;extra_compile_args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compile_opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'c++'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ext_modules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cythonize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To compile just run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build_ext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inplace&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;in the directory with all the files. I essentially use the same setup file for
all of my projects.&lt;/p&gt;

&lt;h1 id=&quot;4-import-and-use&quot;&gt;4) Import and use&lt;/h1&gt;

&lt;p&gt;Whew! That was tiresome. Now we get to reap the rewards of all the hard work!
Once we run &lt;em&gt;setup.py&lt;/em&gt; and compile our code, we should get a shared object file,
&lt;em&gt;ClassWrapper.so&lt;/em&gt;. We can now import this just like any other python module. We
then have access to the class from the python level.&lt;/p&gt;

&lt;p&gt;We can instantiate the class, and set the value of &lt;em&gt;self.Mydouble&lt;/em&gt; to anything
that can be cast to a double:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ClassWrapper&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WrapperClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mydouble&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We have read/write access via the &lt;em&gt;set_cpp_double&lt;/em&gt; and &lt;em&gt;get_cpp_double&lt;/em&gt;
functions which we call thusly:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mydouble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;34.5&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;#setter&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mydouble&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;#getter&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;34.5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can call a void function, which changes the value of the C++ attribute
&lt;em&gt;cpp_double&lt;/em&gt;. Since we wrapped this variable with the python level property
&lt;em&gt;Mydouble&lt;/em&gt;, calling this function changes the value of &lt;em&gt;Mydouble&lt;/em&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mydouble&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can also call functions that take and return values, like this silly
implementation of multiplication:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;35.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And if we try to use the wrong variable type, we get an exception:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Wrongtype!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;---------------------------------------------------------------------------&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;TypeError&lt;/span&gt;                                 &lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipython&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aa4d173bd403&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;----&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Wrongtype!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;./&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pyx&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WrapperClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1057&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)()&lt;/span&gt;
     &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;
     &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;cdef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
     &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;cdef&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;c_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
     &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C_Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;nb&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And finally, you get an exception if you try to use a variable that’s not a property in
&lt;em&gt;WrapperClass&lt;/em&gt;, even though it’s declared &lt;em&gt;public&lt;/em&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp_public&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;---------------------------------------------------------------------------&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;AttributeError&lt;/span&gt;                            &lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipython&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a6bc21d6fa3e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;----&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp_public&lt;/span&gt;


&lt;span class=&quot;nb&quot;&gt;AttributeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ClassWrapper.WrapperClass'&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'cpp_public'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;So, we went through how to wrap a C++ class in python using Cython. I really like being
able to selectively optimize various function as needed. This allows me to use
python when I want to, and C++ only when I need to (I may be a bit biased towards
 python, but so is any sane person).&lt;/p&gt;

&lt;p&gt;Now I am aware that Cython offers functionality of defining c-level functions
within the .pyx files, and many of these can match the speed of optimized C++
code. However, I find it a bit easier to just wrap C++ directly, since I know
that I’m getting the best speed and don’t have to worry about the nuances of
Cython (I think it’s easier to write fast C++ code than it is to write fast
Cython code, particularly for more complex functions). Additionally, If you
already have C++ code lying around, you don’t have to rewrite anything!&lt;/p&gt;</content><author><name></name></author><summary type="html">import C++</summary></entry></feed>